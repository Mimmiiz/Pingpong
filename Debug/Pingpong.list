
Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003030  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003200  08003200  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003208  08003208  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800321c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800321c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a142  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019dc  00000000  00000000  0002a17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002bb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025714  00000000  00000000  0002cca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cc8  00000000  00000000  000523bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e516d  00000000  00000000  0005b084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001401f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  0014026c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031a0 	.word	0x080031a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031a0 	.word	0x080031a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @param None
  * @return None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0b8      	sub	sp, #224	; 0xe0
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fe5a 	bl	8003190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2288      	movs	r2, #136	; 0x88
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fe4c 	bl	8003190 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000524:	2307      	movs	r3, #7
 8000526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	4618      	mov	r0, r3
 800053c:	f000 ff30 	bl	80013a0 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f8f0 	bl	800072a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fafc 	bl	8001b6c <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057a:	f000 f8d6 	bl	800072a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057e:	2302      	movs	r3, #2
 8000580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fcf3 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000594:	f000 f8c9 	bl	800072a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059c:	f000 feaa 	bl	80012f4 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005a6:	f000 f8c0 	bl	800072a <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	37e0      	adds	r7, #224	; 0xe0
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a4c      	ldr	r2, [pc, #304]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a46      	ldr	r2, [pc, #280]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a40      	ldr	r2, [pc, #256]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f000 fe38 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2160      	movs	r1, #96	; 0x60
 800063c:	4831      	ldr	r0, [pc, #196]	; (8000704 <MX_GPIO_Init+0x150>)
 800063e:	f000 fe33 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f641 0106 	movw	r1, #6150	; 0x1806
 8000648:	482f      	ldr	r0, [pc, #188]	; (8000708 <MX_GPIO_Init+0x154>)
 800064a:	f000 fe2d 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x158>)
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4828      	ldr	r0, [pc, #160]	; (8000704 <MX_GPIO_Init+0x150>)
 8000664:	f000 fc78 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 8000668:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fc68 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <MX_GPIO_Init+0x150>)
 80006a0:	f000 fc5a 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80006a4:	f641 0306 	movw	r3, #6150	; 0x1806
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_GPIO_Init+0x154>)
 80006be:	f000 fc4b 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80006c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0x154>)
 80006d8:	f000 fc3e 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x150>)
 80006f2:	f000 fc31 	bl	8000f58 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800
 8000708:	48000400 	.word	0x48000400
 800070c:	10210000 	.word	0x10210000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fa9c 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f7ff fed6 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff4a 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000720:	f000 f9fa 	bl	8000b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000724:	f000 f9d0 	bl	8000ac8 <Test_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x18>

0800072a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @return None
  */
void Error_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <Led_on>:
@brief Led_on, turn one of the pingpong leds on
@param uint8_t Lednr , number to the Led that is turned on
 Lednr can be 1-8, all other values turns all leds off
@return void
*/
void Led_on(uint8_t Lednr) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 1; i <= 8; i++) {
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e0a6      	b.n	8000896 <Led_on+0x15e>
		switch(i) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	3b01      	subs	r3, #1
 800074c:	2b07      	cmp	r3, #7
 800074e:	f200 809f 	bhi.w	8000890 <Led_on+0x158>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <Led_on+0x20>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	08000779 	.word	0x08000779
 800075c:	08000799 	.word	0x08000799
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007dd 	.word	0x080007dd
 8000768:	08000801 	.word	0x08000801
 800076c:	08000829 	.word	0x08000829
 8000770:	08000851 	.word	0x08000851
 8000774:	08000871 	.word	0x08000871
		case 1: // Led 1
			if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	429a      	cmp	r2, r3
 800077e:	d105      	bne.n	800078c <Led_on+0x54>
 8000780:	2201      	movs	r2, #1
 8000782:	2102      	movs	r1, #2
 8000784:	4848      	ldr	r0, [pc, #288]	; (80008a8 <Led_on+0x170>)
 8000786:	f000 fd8f 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			break;
 800078a:	e081      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2102      	movs	r1, #2
 8000790:	4845      	ldr	r0, [pc, #276]	; (80008a8 <Led_on+0x170>)
 8000792:	f000 fd89 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 8000796:	e07b      	b.n	8000890 <Led_on+0x158>
		case 2: // Led 2
			if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	429a      	cmp	r2, r3
 800079e:	d105      	bne.n	80007ac <Led_on+0x74>
 80007a0:	2201      	movs	r2, #1
 80007a2:	2104      	movs	r1, #4
 80007a4:	4840      	ldr	r0, [pc, #256]	; (80008a8 <Led_on+0x170>)
 80007a6:	f000 fd7f 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
			break;
 80007aa:	e071      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2104      	movs	r1, #4
 80007b0:	483d      	ldr	r0, [pc, #244]	; (80008a8 <Led_on+0x170>)
 80007b2:	f000 fd79 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 80007b6:	e06b      	b.n	8000890 <Led_on+0x158>
		case 3: // Led 3
			if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d106      	bne.n	80007ce <Led_on+0x96>
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	4838      	ldr	r0, [pc, #224]	; (80008a8 <Led_on+0x170>)
 80007c8:	f000 fd6e 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
 80007cc:	e060      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d4:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Led_on+0x170>)
 80007d6:	f000 fd67 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 80007da:	e059      	b.n	8000890 <Led_on+0x158>
		case 4: // Led 4
			if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d106      	bne.n	80007f2 <Led_on+0xba>
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Led_on+0x170>)
 80007ec:	f000 fd5c 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
			break;
 80007f0:	e04e      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <Led_on+0x170>)
 80007fa:	f000 fd55 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 80007fe:	e047      	b.n	8000890 <Led_on+0x158>
		case 5: // Led 5
			if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	429a      	cmp	r2, r3
 8000806:	d107      	bne.n	8000818 <Led_on+0xe0>
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 fd49 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
			break;
 8000816:	e03b      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fd41 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 8000826:	e033      	b.n	8000890 <Led_on+0x158>
		case 6: // Led 6
			if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	429a      	cmp	r2, r3
 800082e:	d107      	bne.n	8000840 <Led_on+0x108>
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fd35 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
			break;
 800083e:	e027      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fd2d 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 800084e:	e01f      	b.n	8000890 <Led_on+0x158>
		case 7: // Led 7
			if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	429a      	cmp	r2, r3
 8000856:	d105      	bne.n	8000864 <Led_on+0x12c>
 8000858:	2201      	movs	r2, #1
 800085a:	2120      	movs	r1, #32
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <Led_on+0x174>)
 800085e:	f000 fd23 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
			break;
 8000862:	e015      	b.n	8000890 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2120      	movs	r1, #32
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <Led_on+0x174>)
 800086a:	f000 fd1d 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 800086e:	e00f      	b.n	8000890 <Led_on+0x158>
		case 8: // Led 8
			if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	429a      	cmp	r2, r3
 8000876:	d105      	bne.n	8000884 <Led_on+0x14c>
 8000878:	2201      	movs	r2, #1
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <Led_on+0x174>)
 800087e:	f000 fd13 	bl	80012a8 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
			break;
 8000882:	e004      	b.n	800088e <Led_on+0x156>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <Led_on+0x174>)
 800088a:	f000 fd0d 	bl	80012a8 <HAL_GPIO_WritePin>
			break;
 800088e:	bf00      	nop
	for(i = 1; i <= 8; i++) {
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	3301      	adds	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b08      	cmp	r3, #8
 800089a:	f67f af55 	bls.w	8000748 <Led_on+0x10>
		default:
			;
		} // end of switch
	} // end for-loop
	return;
 800089e:	bf00      	nop
} // End of functions Led_on
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400
 80008ac:	48000800 	.word	0x48000800

080008b0 <setLed>:

void setLed(uint8_t led) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
		if (led==1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <setLed+0x1a>
 80008c0:	2201      	movs	r2, #1
 80008c2:	2102      	movs	r1, #2
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <setLed+0xa0>)
 80008c6:	f000 fcef 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==2) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d104      	bne.n	80008da <setLed+0x2a>
 80008d0:	2201      	movs	r2, #1
 80008d2:	2104      	movs	r1, #4
 80008d4:	481e      	ldr	r0, [pc, #120]	; (8000950 <setLed+0xa0>)
 80008d6:	f000 fce7 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==3) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d105      	bne.n	80008ec <setLed+0x3c>
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <setLed+0xa0>)
 80008e8:	f000 fcde 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==4) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d105      	bne.n	80008fe <setLed+0x4e>
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <setLed+0xa0>)
 80008fa:	f000 fcd5 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==5) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b05      	cmp	r3, #5
 8000902:	d106      	bne.n	8000912 <setLed+0x62>
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 fccb 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==6) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b06      	cmp	r3, #6
 8000916:	d106      	bne.n	8000926 <setLed+0x76>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f000 fcc1 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==7) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b07      	cmp	r3, #7
 800092a:	d104      	bne.n	8000936 <setLed+0x86>
 800092c:	2201      	movs	r2, #1
 800092e:	2120      	movs	r1, #32
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <setLed+0xa4>)
 8000932:	f000 fcb9 	bl	80012a8 <HAL_GPIO_WritePin>
		if (led==8) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b08      	cmp	r3, #8
 800093a:	d105      	bne.n	8000948 <setLed+0x98>
 800093c:	2201      	movs	r2, #1
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <setLed+0xa4>)
 8000942:	f000 fcb1 	bl	80012a8 <HAL_GPIO_WritePin>
		return;
 8000946:	bf00      	nop
 8000948:	bf00      	nop
}
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	48000400 	.word	0x48000400
 8000954:	48000800 	.word	0x48000800

08000958 <Show_points>:
@param1 uint8_t L_points points for left player
@param2 uint8_t R_points points for right player
@return void, no return value
 */

void Show_points(uint8_t L_points, uint8_t R_points) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 1; i <= L_points; i++) {
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e009      	b.n	8000982 <Show_points+0x2a>
		setLed(i);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff9d 	bl	80008b0 <setLed>
		HAL_Delay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 f9e6 	bl	8000d48 <HAL_Delay>
	for (uint8_t i = 1; i <= L_points; i++) {
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	429a      	cmp	r2, r3
 8000988:	d9f1      	bls.n	800096e <Show_points+0x16>
	}
	for(uint8_t j = 8; j > 8-R_points; j--) {
 800098a:	2308      	movs	r3, #8
 800098c:	73bb      	strb	r3, [r7, #14]
 800098e:	e009      	b.n	80009a4 <Show_points+0x4c>
		setLed(j);
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff8c 	bl	80008b0 <setLed>
		HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f000 f9d5 	bl	8000d48 <HAL_Delay>
	for(uint8_t j = 8; j > 8-R_points; j--) {
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
 80009a4:	7bba      	ldrb	r2, [r7, #14]
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	f1c3 0308 	rsb	r3, r3, #8
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dcef      	bgt.n	8000990 <Show_points+0x38>
	}
	return;
 80009b0:	bf00      	nop
}
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f958 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <SystemInit+0x64>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <SystemInit+0x64>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <SystemInit+0x68>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <SystemInit+0x68>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <SystemInit+0x68>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SystemInit+0x68>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <SystemInit+0x68>)
 8000a88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <SystemInit+0x68>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <SystemInit+0x68>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <SystemInit+0x68>)
 8000aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <SystemInit+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SystemInit+0x64>)
 8000aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <Test_program>:
#include "Test.h"
#include <stdint.h>
#include "Pingpong.h"

void Test_program(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	//Test_Led();
	Test_Show_points();
 8000acc:	f000 f802 	bl	8000ad4 <Test_Show_points>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <Test_Show_points>:
	Led_on(9); // Turn off LED 8
	HAL_Delay(1000);
	return;
}

void Test_Show_points(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	uint8_t L_points;
	uint8_t R_points;
	/* Loop through all possible point combinations */
	for(L_points = 0; L_points <= 4; L_points++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e011      	b.n	8000b04 <Test_Show_points+0x30>
		for(R_points = 0; R_points <= 4; R_points++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71bb      	strb	r3, [r7, #6]
 8000ae4:	e008      	b.n	8000af8 <Test_Show_points+0x24>
			Show_points(L_points, R_points);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	79ba      	ldrb	r2, [r7, #6]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff33 	bl	8000958 <Show_points>
		for(R_points = 0; R_points <= 4; R_points++) {
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	3301      	adds	r3, #1
 8000af6:	71bb      	strb	r3, [r7, #6]
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d9f3      	bls.n	8000ae6 <Test_Show_points+0x12>
	for(L_points = 0; L_points <= 4; L_points++) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	3301      	adds	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d9ea      	bls.n	8000ae0 <Test_Show_points+0xc>
		}
	}
	Led_on(9); // Turn off LEDS
 8000b0a:	2009      	movs	r0, #9
 8000b0c:	f7ff fe14 	bl	8000738 <Led_on>
	return;
 8000b10:	bf00      	nop
}
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART2_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART2_UART_Init+0x58>)
 8000b5c:	f001 feba 	bl	80028d4 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f7ff fde0 	bl	800072a <Error_Handler>
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000028 	.word	0x20000028
 8000b74:	40004400 	.word	0x40004400

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 f9b6 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c00:	f7ff ff2c 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c06:	e003      	b.n	8000c10 <LoopCopyDataInit>

08000c08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c0e:	3104      	adds	r1, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c18:	d3f6      	bcc.n	8000c08 <CopyDataInit>
	ldr	r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c1c:	e002      	b.n	8000c24 <LoopFillZerobss>

08000c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c20:	f842 3b04 	str.w	r3, [r2], #4

08000c24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <LoopForever+0x16>)
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c28:	d3f9      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fa8d 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2e:	f7ff fd6f 	bl	8000710 <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c34:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c38:	08003210 	.word	0x08003210
	ldr	r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c40:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c44:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c48:	200000ac 	.word	0x200000ac

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_Init+0x3c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_Init+0x3c>)
 8000c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f942 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f80f 	bl	8000c90 <HAL_InitTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	e001      	b.n	8000c82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7e:	f7ff fe9b 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_InitTick+0x6c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d023      	beq.n	8000cec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_InitTick+0x70>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_InitTick+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f93f 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10f      	bne.n	8000ce6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d809      	bhi.n	8000ce0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f917 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_InitTick+0x74>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e007      	b.n	8000cf0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	e004      	b.n	8000cf0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e001      	b.n	8000cf0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200000a8 	.word	0x200000a8

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000a8 	.word	0x200000a8

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_Delay+0x40>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000008 	.word	0x20000008

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e17f      	b.n	8001268 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8171 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d00b      	beq.n	8000fa0 <HAL_GPIO_Init+0x48>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f94:	2b11      	cmp	r3, #17
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d118      	bne.n	8001040 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x128>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b12      	cmp	r3, #18
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80ac 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b5e      	ldr	r3, [pc, #376]	; (8001284 <HAL_GPIO_Init+0x32c>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a5d      	ldr	r2, [pc, #372]	; (8001284 <HAL_GPIO_Init+0x32c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_GPIO_Init+0x32c>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001122:	4a59      	ldr	r2, [pc, #356]	; (8001288 <HAL_GPIO_Init+0x330>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x242>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_GPIO_Init+0x334>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4d      	ldr	r2, [pc, #308]	; (8001290 <HAL_GPIO_Init+0x338>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_GPIO_Init+0x33c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4b      	ldr	r2, [pc, #300]	; (8001298 <HAL_GPIO_Init+0x340>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4a      	ldr	r2, [pc, #296]	; (800129c <HAL_GPIO_Init+0x344>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <HAL_GPIO_Init+0x348>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x22a>
 800117e:	2306      	movs	r3, #6
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001182:	2307      	movs	r3, #7
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x244>
 800119a:	2300      	movs	r3, #0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ac:	4936      	ldr	r1, [pc, #216]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae78 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000
 8001288:	40010000 	.word	0x40010000
 800128c:	48000400 	.word	0x48000400
 8001290:	48000800 	.word	0x48000800
 8001294:	48000c00 	.word	0x48000c00
 8001298:	48001000 	.word	0x48001000
 800129c:	48001400 	.word	0x48001400
 80012a0:	48001800 	.word	0x48001800
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000

080012f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001302:	d130      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800130c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001310:	d038      	beq.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2232      	movs	r2, #50	; 0x32
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001338:	e002      	b.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d102      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f2      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d110      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e00f      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d007      	beq.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000
 8001398:	20000000 	.word	0x20000000
 800139c:	431bde83 	.word	0x431bde83

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e3d4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4ba1      	ldr	r3, [pc, #644]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013bc:	4b9e      	ldr	r3, [pc, #632]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80e4 	beq.w	800159c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_RCC_OscConfig+0x4a>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	f040 808b 	bne.w	80014f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 8087 	bne.w	80014f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ea:	4b93      	ldr	r3, [pc, #588]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x62>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e3ac      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_RCC_OscConfig+0x7c>
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141a:	e005      	b.n	8001428 <HAL_RCC_OscConfig+0x88>
 800141c:	4b86      	ldr	r3, [pc, #536]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001428:	4293      	cmp	r3, r2
 800142a:	d223      	bcs.n	8001474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fd3f 	bl	8001eb4 <RCC_SetFlashLatencyFromMSIRange>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e38d      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001440:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b7a      	ldr	r3, [pc, #488]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4977      	ldr	r1, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4972      	ldr	r1, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
 8001472:	e025      	b.n	80014c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6f      	ldr	r2, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	496a      	ldr	r1, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001492:	4b69      	ldr	r3, [pc, #420]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	4965      	ldr	r1, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fcff 	bl	8001eb4 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e34d      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c0:	f000 fc36 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	4a5a      	ldr	r2, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x29c>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	fa21 f303 	lsr.w	r3, r1, r3
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x2a0>)
 80014de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fbd3 	bl	8000c90 <HAL_InitTick>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d052      	beq.n	800159a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	e331      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d032      	beq.n	8001566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800150c:	f7ff fc10 	bl	8000d30 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001514:	f7ff fc0c 	bl	8000d30 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e31a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e01a      	b.n	800159c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001572:	f7ff fbdd 	bl	8000d30 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157a:	f7ff fbd9 	bl	8000d30 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e2e7      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x1da>
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d074      	beq.n	8001692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x21a>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d10e      	bne.n	80015d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d064      	beq.n	8001690 <HAL_RCC_OscConfig+0x2f0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d160      	bne.n	8001690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e2c4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x24a>
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e01d      	b.n	8001626 <HAL_RCC_OscConfig+0x286>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f2:	d10c      	bne.n	800160e <HAL_RCC_OscConfig+0x26e>
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e00b      	b.n	8001626 <HAL_RCC_OscConfig+0x286>
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fb7f 	bl	8000d30 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	e011      	b.n	800165a <HAL_RCC_OscConfig+0x2ba>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	080031b8 	.word	0x080031b8
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb72 	bl	8000d30 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e280      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	4baf      	ldr	r3, [pc, #700]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x2a8>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb62 	bl	8000d30 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb5e 	bl	8000d30 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e26c      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d0>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d060      	beq.n	8001760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x310>
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d119      	bne.n	80016de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d116      	bne.n	80016de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	4b99      	ldr	r3, [pc, #612]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x328>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e249      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	4990      	ldr	r1, [pc, #576]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016dc:	e040      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d023      	beq.n	800172e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e6:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a8b      	ldr	r2, [pc, #556]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fb1d 	bl	8000d30 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fb19 	bl	8000d30 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e227      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	497c      	ldr	r1, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e018      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff faf9 	bl	8000d30 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff faf5 	bl	8000d30 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e203      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d03c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01c      	beq.n	80017ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	4a67      	ldr	r2, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fad4 	bl	8000d30 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fad0 	bl	8000d30 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1de      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ef      	beq.n	800178c <HAL_RCC_OscConfig+0x3ec>
 80017ac:	e01b      	b.n	80017e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff fab7 	bl	8000d30 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fab3 	bl	8000d30 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1c1      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	4b4f      	ldr	r3, [pc, #316]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ef      	bne.n	80017c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80a6 	beq.w	8001940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f8:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10d      	bne.n	8001820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a43      	ldr	r2, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181c:	2301      	movs	r3, #1
 800181e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d118      	bne.n	800185e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001838:	f7ff fa7a 	bl	8000d30 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7ff fa76 	bl	8000d30 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e184      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x4d8>
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001876:	e024      	b.n	80018c2 <HAL_RCC_OscConfig+0x522>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d110      	bne.n	80018a2 <HAL_RCC_OscConfig+0x502>
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a0:	e00f      	b.n	80018c2 <HAL_RCC_OscConfig+0x522>
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fa31 	bl	8000d30 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fa2d 	bl	8000d30 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e139      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ed      	beq.n	80018d2 <HAL_RCC_OscConfig+0x532>
 80018f6:	e01a      	b.n	800192e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa1a 	bl	8000d30 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fa16 	bl	8000d30 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d906      	bls.n	8001920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e122      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	4b90      	ldr	r3, [pc, #576]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1e8      	bne.n	8001900 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8108 	beq.w	8001b5a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	2b02      	cmp	r3, #2
 8001950:	f040 80d0 	bne.w	8001af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	429a      	cmp	r2, r3
 8001966:	d130      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	3b01      	subs	r3, #1
 8001974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d127      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d11f      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001994:	2a07      	cmp	r2, #7
 8001996:	bf14      	ite	ne
 8001998:	2201      	movne	r2, #1
 800199a:	2200      	moveq	r2, #0
 800199c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	4293      	cmp	r3, r2
 80019a0:	d113      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d06e      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d069      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d0:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b7      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ec:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f8:	f7ff f99a 	bl	8000d30 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f996 	bl	8000d30 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0a4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_RCC_OscConfig+0x7c8>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a38:	0212      	lsls	r2, r2, #8
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	3a01      	subs	r2, #1
 8001a44:	0552      	lsls	r2, r2, #21
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0652      	lsls	r2, r2, #25
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a58:	0912      	lsrs	r2, r2, #4
 8001a5a:	0452      	lsls	r2, r2, #17
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	4941      	ldr	r1, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7c:	f7ff f958 	bl	8000d30 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f954 	bl	8000d30 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e062      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa2:	e05a      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e059      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d152      	bne.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001acc:	f7ff f930 	bl	8000d30 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f92c 	bl	8000d30 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e03a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x734>
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d02d      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8ff 	bl	8000d30 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f8fb 	bl	8000d30 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e009      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x796>
 8001b54:	e001      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	f99d808c 	.word	0xf99d808c

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0c8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4961      	ldr	r1, [pc, #388]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b0      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d04c      	beq.n	8001c56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d121      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e09e      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d115      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e092      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e086      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e07e      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 0203 	bic.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	493f      	ldr	r1, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c26:	f7ff f883 	bl	8000d30 <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7ff f87f 	bl	8000d30 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e066      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 020c 	and.w	r2, r3, #12
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d1eb      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d210      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e036      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4918      	ldr	r1, [pc, #96]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4910      	ldr	r1, [pc, #64]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce2:	f000 f825 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ffc2 	bl	8000c90 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080031b8 	.word	0x080031b8
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d11e      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e004      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d133      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0xaa>
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dd6:	617b      	str	r3, [r7, #20]
      break;
 8001dd8:	e005      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	617b      	str	r3, [r7, #20]
      break;
 8001de4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	3301      	adds	r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	fb02 f203 	mul.w	r2, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0e5b      	lsrs	r3, r3, #25
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e26:	69bb      	ldr	r3, [r7, #24]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3724      	adds	r7, #36	; 0x24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080031d0 	.word	0x080031d0
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	080031c8 	.word	0x080031c8

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e8c:	f7ff ffda 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080031c8 	.word	0x080031c8

08001eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ecc:	f7ff fa04 	bl	80012d8 <HAL_PWREx_GetVoltageRange>
 8001ed0:	6178      	str	r0, [r7, #20]
 8001ed2:	e014      	b.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eec:	f7ff f9f4 	bl	80012d8 <HAL_PWREx_GetVoltageRange>
 8001ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f04:	d10b      	bne.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d919      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f10:	d902      	bls.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f12:	2302      	movs	r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e013      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e010      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d902      	bls.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e00a      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d102      	bne.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f30:	2302      	movs	r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e004      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b70      	cmp	r3, #112	; 0x70
 8001f3a:	d101      	bne.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4909      	ldr	r1, [pc, #36]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40022000 	.word	0x40022000

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f80:	2300      	movs	r3, #0
 8001f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03f      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f98:	d01c      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9e:	d802      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001fa4:	e01f      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001faa:	d003      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb0:	d01c      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb4:	4b85      	ldr	r3, [pc, #532]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a84      	ldr	r2, [pc, #528]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc0:	e015      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fab9 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd2:	e00c      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3320      	adds	r3, #32
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fba0 	bl	8002720 <RCCEx_PLLSAI2_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe4:	e003      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fea:	e000      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10b      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff4:	4b75      	ldr	r3, [pc, #468]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800200a:	e001      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03f      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d01c      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202a:	d802      	bhi.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00e      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002030:	e01f      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002036:	d003      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800203c:	d01c      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800203e:	e018      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800204c:	e015      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa73 	bl	8002540 <RCCEx_PLLSAI1_Config>
 800205a:	4603      	mov	r3, r0
 800205c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3320      	adds	r3, #32
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fb5a 	bl	8002720 <RCCEx_PLLSAI2_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208e:	494f      	ldr	r1, [pc, #316]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a0 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a40      	ldr	r2, [pc, #256]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fe20 	bl	8000d30 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fe1c 	bl	8000d30 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	74fb      	strb	r3, [r7, #19]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01f      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d019      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fddb 	bl	8000d30 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	e00b      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fdd7 	bl	8000d30 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d902      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	74fb      	strb	r3, [r7, #19]
            break;
 8002194:	e006      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ec      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021c2:	e009      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
 80021c8:	e006      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d8:	7c7b      	ldrb	r3, [r7, #17]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a9d      	ldr	r2, [pc, #628]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f6:	4b98      	ldr	r3, [pc, #608]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	4994      	ldr	r1, [pc, #592]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002218:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 020c 	bic.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	498c      	ldr	r1, [pc, #560]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223a:	4b87      	ldr	r3, [pc, #540]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4983      	ldr	r1, [pc, #524]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800225c:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	497b      	ldr	r1, [pc, #492]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	4972      	ldr	r1, [pc, #456]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a0:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	496a      	ldr	r1, [pc, #424]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c2:	4b65      	ldr	r3, [pc, #404]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	4961      	ldr	r1, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e4:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4959      	ldr	r1, [pc, #356]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002314:	4950      	ldr	r1, [pc, #320]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	4948      	ldr	r1, [pc, #288]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	493f      	ldr	r1, [pc, #252]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d028      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	4937      	ldr	r1, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800238a:	d106      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a31      	ldr	r2, [pc, #196]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e011      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a2:	d10c      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8c8 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d028      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	491f      	ldr	r1, [pc, #124]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e8:	d106      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f4:	60d3      	str	r3, [r2, #12]
 80023f6:	e011      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f899 	bl	8002540 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d109      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a02      	ldr	r2, [pc, #8]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
 8002454:	e014      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f867 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249a:	4928      	ldr	r1, [pc, #160]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	2102      	movs	r1, #2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f844 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d014      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	74bb      	strb	r3, [r7, #18]
 80024c6:	e011      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3320      	adds	r3, #32
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f921 	bl	8002720 <RCCEx_PLLSAI2_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002506:	490d      	ldr	r1, [pc, #52]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002532:	7cbb      	ldrb	r3, [r7, #18]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
       ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002572:	4b6a      	ldr	r3, [pc, #424]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
       ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d044      	beq.n	8002610 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e041      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d00c      	beq.n	80025ae <RCCEx_PLLSAI1_Config+0x6e>
 8002594:	2b03      	cmp	r3, #3
 8002596:	d013      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x80>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d120      	bne.n	80025de <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259c:	4b5f      	ldr	r3, [pc, #380]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11d      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e01a      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ae:	4b5b      	ldr	r3, [pc, #364]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025be:	e013      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c0:	4b56      	ldr	r3, [pc, #344]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025dc:	e006      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      break;
 80025e2:	e004      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025e4:	bf00      	nop
 80025e6:	e002      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025e8:	bf00      	nop
 80025ea:	e000      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	3b01      	subs	r3, #1
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	430b      	orrs	r3, r1
 800260a:	4944      	ldr	r1, [pc, #272]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d17d      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a40      	ldr	r2, [pc, #256]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 800261c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002622:	f7fe fb85 	bl	8000d30 <HAL_GetTick>
 8002626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002628:	e009      	b.n	800263e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800262a:	f7fe fb81 	bl	8000d30 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	73fb      	strb	r3, [r7, #15]
        break;
 800263c:	e005      	b.n	800264a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d160      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d111      	bne.n	800267a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800265e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	0211      	lsls	r1, r2, #8
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68d2      	ldr	r2, [r2, #12]
 800266c:	0912      	lsrs	r2, r2, #4
 800266e:	0452      	lsls	r2, r2, #17
 8002670:	430a      	orrs	r2, r1
 8002672:	492a      	ldr	r1, [pc, #168]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	610b      	str	r3, [r1, #16]
 8002678:	e027      	b.n	80026ca <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d112      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	0211      	lsls	r1, r2, #8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6912      	ldr	r2, [r2, #16]
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0552      	lsls	r2, r2, #21
 800269c:	430a      	orrs	r2, r1
 800269e:	491f      	ldr	r1, [pc, #124]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	610b      	str	r3, [r1, #16]
 80026a4:	e011      	b.n	80026ca <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6892      	ldr	r2, [r2, #8]
 80026b6:	0211      	lsls	r1, r2, #8
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6952      	ldr	r2, [r2, #20]
 80026bc:	0852      	lsrs	r2, r2, #1
 80026be:	3a01      	subs	r2, #1
 80026c0:	0652      	lsls	r2, r2, #25
 80026c2:	430a      	orrs	r2, r1
 80026c4:	4915      	ldr	r1, [pc, #84]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fb2b 	bl	8000d30 <HAL_GetTick>
 80026da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026dc:	e009      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026de:	f7fe fb27 	bl	8000d30 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d902      	bls.n	80026f2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	73fb      	strb	r3, [r7, #15]
          break;
 80026f0:	e005      	b.n	80026fe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ef      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <RCCEx_PLLSAI1_Config+0x1dc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272e:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
       ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
       ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d044      	beq.n	80027f0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e041      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d00c      	beq.n	800278e <RCCEx_PLLSAI2_Config+0x6e>
 8002774:	2b03      	cmp	r3, #3
 8002776:	d013      	beq.n	80027a0 <RCCEx_PLLSAI2_Config+0x80>
 8002778:	2b01      	cmp	r3, #1
 800277a:	d120      	bne.n	80027be <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277c:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11d      	bne.n	80027c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e01a      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800278e:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e013      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ac:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027bc:	e006      	b.n	80027cc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      break;
 80027c2:	e004      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027c4:	bf00      	nop
 80027c6:	e002      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027c8:	bf00      	nop
 80027ca:	e000      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d4:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	430b      	orrs	r3, r1
 80027ea:	4939      	ldr	r1, [pc, #228]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d167      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002802:	f7fe fa95 	bl	8000d30 <HAL_GetTick>
 8002806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002808:	e009      	b.n	800281e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800280a:	f7fe fa91 	bl	8000d30 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	73fb      	strb	r3, [r7, #15]
        break;
 800281c:	e005      	b.n	800282a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d14a      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d111      	bne.n	800285a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	0211      	lsls	r1, r2, #8
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	0912      	lsrs	r2, r2, #4
 800284e:	0452      	lsls	r2, r2, #17
 8002850:	430a      	orrs	r2, r1
 8002852:	491f      	ldr	r1, [pc, #124]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	614b      	str	r3, [r1, #20]
 8002858:	e011      	b.n	800287e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002862:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	0211      	lsls	r1, r2, #8
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6912      	ldr	r2, [r2, #16]
 8002870:	0852      	lsrs	r2, r2, #1
 8002872:	3a01      	subs	r2, #1
 8002874:	0652      	lsls	r2, r2, #25
 8002876:	430a      	orrs	r2, r1
 8002878:	4915      	ldr	r1, [pc, #84]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fa51 	bl	8000d30 <HAL_GetTick>
 800288e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002890:	e009      	b.n	80028a6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002892:	f7fe fa4d 	bl	8000d30 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d902      	bls.n	80028a6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	73fb      	strb	r3, [r7, #15]
          break;
 80028a4:	e005      	b.n	80028b2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ef      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e040      	b.n	8002968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f93e 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f82c 	bl	8002970 <UART_SetConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 faaa 	bl	8002e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fb31 	bl	8002fc8 <UART_CheckIdleState>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4bac      	ldr	r3, [pc, #688]	; (8002c50 <UART_SetConfig+0x2e0>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	69f9      	ldr	r1, [r7, #28]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4aa2      	ldr	r2, [pc, #648]	; (8002c54 <UART_SetConfig+0x2e4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a99      	ldr	r2, [pc, #612]	; (8002c58 <UART_SetConfig+0x2e8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d121      	bne.n	8002a3c <UART_SetConfig+0xcc>
 80029f8:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <UART_SetConfig+0x2ec>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d816      	bhi.n	8002a34 <UART_SetConfig+0xc4>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0x9c>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a29 	.word	0x08002a29
 8002a14:	08002a23 	.word	0x08002a23
 8002a18:	08002a2f 	.word	0x08002a2f
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	76fb      	strb	r3, [r7, #27]
 8002a20:	e0e8      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a22:	2302      	movs	r3, #2
 8002a24:	76fb      	strb	r3, [r7, #27]
 8002a26:	e0e5      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	76fb      	strb	r3, [r7, #27]
 8002a2c:	e0e2      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e0df      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a34:	2310      	movs	r3, #16
 8002a36:	76fb      	strb	r3, [r7, #27]
 8002a38:	bf00      	nop
 8002a3a:	e0db      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a87      	ldr	r2, [pc, #540]	; (8002c60 <UART_SetConfig+0x2f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d134      	bne.n	8002ab0 <UART_SetConfig+0x140>
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <UART_SetConfig+0x2ec>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d829      	bhi.n	8002aa8 <UART_SetConfig+0x138>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <UART_SetConfig+0xec>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002aa9 	.word	0x08002aa9
 8002a64:	08002aa9 	.word	0x08002aa9
 8002a68:	08002aa9 	.word	0x08002aa9
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002aa9 	.word	0x08002aa9
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002aa9 	.word	0x08002aa9
 8002a7c:	08002a97 	.word	0x08002a97
 8002a80:	08002aa9 	.word	0x08002aa9
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002aa9 	.word	0x08002aa9
 8002a8c:	08002aa3 	.word	0x08002aa3
 8002a90:	2300      	movs	r3, #0
 8002a92:	76fb      	strb	r3, [r7, #27]
 8002a94:	e0ae      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a96:	2302      	movs	r3, #2
 8002a98:	76fb      	strb	r3, [r7, #27]
 8002a9a:	e0ab      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	76fb      	strb	r3, [r7, #27]
 8002aa0:	e0a8      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	76fb      	strb	r3, [r7, #27]
 8002aa6:	e0a5      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	bf00      	nop
 8002aae:	e0a1      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <UART_SetConfig+0x2f4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d120      	bne.n	8002afc <UART_SetConfig+0x18c>
 8002aba:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <UART_SetConfig+0x2ec>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d00f      	beq.n	8002ae8 <UART_SetConfig+0x178>
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d802      	bhi.n	8002ad2 <UART_SetConfig+0x162>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <UART_SetConfig+0x16c>
 8002ad0:	e010      	b.n	8002af4 <UART_SetConfig+0x184>
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d005      	beq.n	8002ae2 <UART_SetConfig+0x172>
 8002ad6:	2b30      	cmp	r3, #48	; 0x30
 8002ad8:	d009      	beq.n	8002aee <UART_SetConfig+0x17e>
 8002ada:	e00b      	b.n	8002af4 <UART_SetConfig+0x184>
 8002adc:	2300      	movs	r3, #0
 8002ade:	76fb      	strb	r3, [r7, #27]
 8002ae0:	e088      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	76fb      	strb	r3, [r7, #27]
 8002ae6:	e085      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	76fb      	strb	r3, [r7, #27]
 8002aec:	e082      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002aee:	2308      	movs	r3, #8
 8002af0:	76fb      	strb	r3, [r7, #27]
 8002af2:	e07f      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002af4:	2310      	movs	r3, #16
 8002af6:	76fb      	strb	r3, [r7, #27]
 8002af8:	bf00      	nop
 8002afa:	e07b      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a59      	ldr	r2, [pc, #356]	; (8002c68 <UART_SetConfig+0x2f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d120      	bne.n	8002b48 <UART_SetConfig+0x1d8>
 8002b06:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <UART_SetConfig+0x2ec>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d00f      	beq.n	8002b34 <UART_SetConfig+0x1c4>
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d802      	bhi.n	8002b1e <UART_SetConfig+0x1ae>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <UART_SetConfig+0x1b8>
 8002b1c:	e010      	b.n	8002b40 <UART_SetConfig+0x1d0>
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d005      	beq.n	8002b2e <UART_SetConfig+0x1be>
 8002b22:	2bc0      	cmp	r3, #192	; 0xc0
 8002b24:	d009      	beq.n	8002b3a <UART_SetConfig+0x1ca>
 8002b26:	e00b      	b.n	8002b40 <UART_SetConfig+0x1d0>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	76fb      	strb	r3, [r7, #27]
 8002b2c:	e062      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	76fb      	strb	r3, [r7, #27]
 8002b32:	e05f      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b34:	2304      	movs	r3, #4
 8002b36:	76fb      	strb	r3, [r7, #27]
 8002b38:	e05c      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	76fb      	strb	r3, [r7, #27]
 8002b3e:	e059      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b40:	2310      	movs	r3, #16
 8002b42:	76fb      	strb	r3, [r7, #27]
 8002b44:	bf00      	nop
 8002b46:	e055      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <UART_SetConfig+0x2fc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d124      	bne.n	8002b9c <UART_SetConfig+0x22c>
 8002b52:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <UART_SetConfig+0x2ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d012      	beq.n	8002b88 <UART_SetConfig+0x218>
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d802      	bhi.n	8002b6e <UART_SetConfig+0x1fe>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <UART_SetConfig+0x20c>
 8002b6c:	e012      	b.n	8002b94 <UART_SetConfig+0x224>
 8002b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b72:	d006      	beq.n	8002b82 <UART_SetConfig+0x212>
 8002b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b78:	d009      	beq.n	8002b8e <UART_SetConfig+0x21e>
 8002b7a:	e00b      	b.n	8002b94 <UART_SetConfig+0x224>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	76fb      	strb	r3, [r7, #27]
 8002b80:	e038      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b82:	2302      	movs	r3, #2
 8002b84:	76fb      	strb	r3, [r7, #27]
 8002b86:	e035      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	76fb      	strb	r3, [r7, #27]
 8002b8c:	e032      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	76fb      	strb	r3, [r7, #27]
 8002b92:	e02f      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b94:	2310      	movs	r3, #16
 8002b96:	76fb      	strb	r3, [r7, #27]
 8002b98:	bf00      	nop
 8002b9a:	e02b      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <UART_SetConfig+0x2e4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d124      	bne.n	8002bf0 <UART_SetConfig+0x280>
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <UART_SetConfig+0x2ec>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d012      	beq.n	8002bdc <UART_SetConfig+0x26c>
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d802      	bhi.n	8002bc2 <UART_SetConfig+0x252>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <UART_SetConfig+0x260>
 8002bc0:	e012      	b.n	8002be8 <UART_SetConfig+0x278>
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc6:	d006      	beq.n	8002bd6 <UART_SetConfig+0x266>
 8002bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bcc:	d009      	beq.n	8002be2 <UART_SetConfig+0x272>
 8002bce:	e00b      	b.n	8002be8 <UART_SetConfig+0x278>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	76fb      	strb	r3, [r7, #27]
 8002bd4:	e00e      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	76fb      	strb	r3, [r7, #27]
 8002bda:	e00b      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	76fb      	strb	r3, [r7, #27]
 8002be0:	e008      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002be2:	2308      	movs	r3, #8
 8002be4:	76fb      	strb	r3, [r7, #27]
 8002be6:	e005      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002be8:	2310      	movs	r3, #16
 8002bea:	76fb      	strb	r3, [r7, #27]
 8002bec:	bf00      	nop
 8002bee:	e001      	b.n	8002bf4 <UART_SetConfig+0x284>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <UART_SetConfig+0x2e4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f040 8087 	bne.w	8002d0e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c00:	7efb      	ldrb	r3, [r7, #27]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d836      	bhi.n	8002c74 <UART_SetConfig+0x304>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <UART_SetConfig+0x29c>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c75 	.word	0x08002c75
 8002c14:	08002c39 	.word	0x08002c39
 8002c18:	08002c75 	.word	0x08002c75
 8002c1c:	08002c3f 	.word	0x08002c3f
 8002c20:	08002c75 	.word	0x08002c75
 8002c24:	08002c75 	.word	0x08002c75
 8002c28:	08002c75 	.word	0x08002c75
 8002c2c:	08002c47 	.word	0x08002c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c30:	f7ff f914 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8002c34:	6178      	str	r0, [r7, #20]
        break;
 8002c36:	e022      	b.n	8002c7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <UART_SetConfig+0x300>)
 8002c3a:	617b      	str	r3, [r7, #20]
        break;
 8002c3c:	e01f      	b.n	8002c7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3e:	f7ff f877 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8002c42:	6178      	str	r0, [r7, #20]
        break;
 8002c44:	e01b      	b.n	8002c7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	617b      	str	r3, [r7, #20]
        break;
 8002c4c:	e017      	b.n	8002c7e <UART_SetConfig+0x30e>
 8002c4e:	bf00      	nop
 8002c50:	efff69f3 	.word	0xefff69f3
 8002c54:	40008000 	.word	0x40008000
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40004400 	.word	0x40004400
 8002c64:	40004800 	.word	0x40004800
 8002c68:	40004c00 	.word	0x40004c00
 8002c6c:	40005000 	.word	0x40005000
 8002c70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	76bb      	strb	r3, [r7, #26]
        break;
 8002c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80f1 	beq.w	8002e68 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d305      	bcc.n	8002ca2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d902      	bls.n	8002ca8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	76bb      	strb	r3, [r7, #26]
 8002ca6:	e0df      	b.n	8002e68 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	0214      	lsls	r4, r2, #8
 8002cba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002cbe:	020b      	lsls	r3, r1, #8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6852      	ldr	r2, [r2, #4]
 8002cc4:	0852      	lsrs	r2, r2, #1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	eb13 0b01 	adds.w	fp, r3, r1
 8002cd0:	eb44 0c02 	adc.w	ip, r4, r2
 8002cd4:	4658      	mov	r0, fp
 8002cd6:	4661      	mov	r1, ip
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f04f 0400 	mov.w	r4, #0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	f7fd fa70 	bl	80001c8 <__aeabi_uldivmod>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	460c      	mov	r4, r1
 8002cec:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cf4:	d308      	bcc.n	8002d08 <UART_SetConfig+0x398>
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfc:	d204      	bcs.n	8002d08 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	e0af      	b.n	8002e68 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	76bb      	strb	r3, [r7, #26]
 8002d0c:	e0ac      	b.n	8002e68 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d15b      	bne.n	8002dd0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002d18:	7efb      	ldrb	r3, [r7, #27]
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d827      	bhi.n	8002d6e <UART_SetConfig+0x3fe>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <UART_SetConfig+0x3b4>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d5f 	.word	0x08002d5f
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d6f 	.word	0x08002d6f
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d67 	.word	0x08002d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff f888 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8002d4c:	6178      	str	r0, [r7, #20]
        break;
 8002d4e:	e013      	b.n	8002d78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff f89a 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8002d54:	6178      	str	r0, [r7, #20]
        break;
 8002d56:	e00f      	b.n	8002d78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <UART_SetConfig+0x510>)
 8002d5a:	617b      	str	r3, [r7, #20]
        break;
 8002d5c:	e00c      	b.n	8002d78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7fe ffe7 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8002d62:	6178      	str	r0, [r7, #20]
        break;
 8002d64:	e008      	b.n	8002d78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	617b      	str	r3, [r7, #20]
        break;
 8002d6c:	e004      	b.n	8002d78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	76bb      	strb	r3, [r7, #26]
        break;
 8002d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d074      	beq.n	8002e68 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005a      	lsls	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d916      	bls.n	8002dca <UART_SetConfig+0x45a>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d212      	bcs.n	8002dca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f023 030f 	bic.w	r3, r3, #15
 8002dac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	89fa      	ldrh	r2, [r7, #14]
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	e04e      	b.n	8002e68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	76bb      	strb	r3, [r7, #26]
 8002dce:	e04b      	b.n	8002e68 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dd0:	7efb      	ldrb	r3, [r7, #27]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d827      	bhi.n	8002e26 <UART_SetConfig+0x4b6>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <UART_SetConfig+0x46c>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e01 	.word	0x08002e01
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e11 	.word	0x08002e11
 8002de8:	08002e27 	.word	0x08002e27
 8002dec:	08002e17 	.word	0x08002e17
 8002df0:	08002e27 	.word	0x08002e27
 8002df4:	08002e27 	.word	0x08002e27
 8002df8:	08002e27 	.word	0x08002e27
 8002dfc:	08002e1f 	.word	0x08002e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e00:	f7ff f82c 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8002e04:	6178      	str	r0, [r7, #20]
        break;
 8002e06:	e013      	b.n	8002e30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e08:	f7ff f83e 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8002e0c:	6178      	str	r0, [r7, #20]
        break;
 8002e0e:	e00f      	b.n	8002e30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <UART_SetConfig+0x510>)
 8002e12:	617b      	str	r3, [r7, #20]
        break;
 8002e14:	e00c      	b.n	8002e30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e16:	f7fe ff8b 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8002e1a:	6178      	str	r0, [r7, #20]
        break;
 8002e1c:	e008      	b.n	8002e30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e22:	617b      	str	r3, [r7, #20]
        break;
 8002e24:	e004      	b.n	8002e30 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	76bb      	strb	r3, [r7, #26]
        break;
 8002e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	085a      	lsrs	r2, r3, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d908      	bls.n	8002e64 <UART_SetConfig+0x4f4>
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d204      	bcs.n	8002e64 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	e001      	b.n	8002e68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e74:	7ebb      	ldrb	r3, [r7, #26]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002e80:	00f42400 	.word	0x00f42400

08002e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01a      	beq.n	8002f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f82:	d10a      	bne.n	8002f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fd6:	f7fd feab 	bl	8000d30 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d10e      	bne.n	8003008 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f82a 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e020      	b.n	800304a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d10e      	bne.n	8003034 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003016:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f814 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e00a      	b.n	800304a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	e05d      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d059      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fd fe60 	bl	8000d30 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <UART_WaitOnFlagUntilTimeout+0x30>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11b      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003090:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e042      	b.n	8003140 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02b      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d123      	bne.n	8003120 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e00f      	b.n	8003140 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	d092      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	4e0d      	ldr	r6, [pc, #52]	; (8003180 <__libc_init_array+0x38>)
 800314c:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 800314e:	1ba4      	subs	r4, r4, r6
 8003150:	10a4      	asrs	r4, r4, #2
 8003152:	2500      	movs	r5, #0
 8003154:	42a5      	cmp	r5, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	4e0b      	ldr	r6, [pc, #44]	; (8003188 <__libc_init_array+0x40>)
 800315a:	4c0c      	ldr	r4, [pc, #48]	; (800318c <__libc_init_array+0x44>)
 800315c:	f000 f820 	bl	80031a0 <_init>
 8003160:	1ba4      	subs	r4, r4, r6
 8003162:	10a4      	asrs	r4, r4, #2
 8003164:	2500      	movs	r5, #0
 8003166:	42a5      	cmp	r5, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003170:	4798      	blx	r3
 8003172:	3501      	adds	r5, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800317a:	4798      	blx	r3
 800317c:	3501      	adds	r5, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	08003208 	.word	0x08003208
 8003184:	08003208 	.word	0x08003208
 8003188:	08003208 	.word	0x08003208
 800318c:	0800320c 	.word	0x0800320c

08003190 <memset>:
 8003190:	4402      	add	r2, r0
 8003192:	4603      	mov	r3, r0
 8003194:	4293      	cmp	r3, r2
 8003196:	d100      	bne.n	800319a <memset+0xa>
 8003198:	4770      	bx	lr
 800319a:	f803 1b01 	strb.w	r1, [r3], #1
 800319e:	e7f9      	b.n	8003194 <memset+0x4>

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
