
Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034dc  080034dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e4  080034e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080034f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080034f8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a37b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a49  00000000  00000000  0002a3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002be00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258bf  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009009  00000000  00000000  000527d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e520f  00000000  00000000  0005b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001409ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  00140a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800347c 	.word	0x0800347c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800347c 	.word	0x0800347c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @param None
  * @return None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0b8      	sub	sp, #224	; 0xe0
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 ffc8 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2288      	movs	r2, #136	; 0x88
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ffba 	bl	800346c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000524:	2307      	movs	r3, #7
 8000526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f89e 	bl	800167c <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f8f0 	bl	800072a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fc6a 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057a:	f000 f8d6 	bl	800072a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057e:	2302      	movs	r3, #2
 8000580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fe61 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000594:	f000 f8c9 	bl	800072a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059c:	f001 f818 	bl	80015d0 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005a6:	f000 f8c0 	bl	800072a <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	37e0      	adds	r7, #224	; 0xe0
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a4c      	ldr	r2, [pc, #304]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a46      	ldr	r2, [pc, #280]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a40      	ldr	r2, [pc, #256]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f000 ffa6 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2160      	movs	r1, #96	; 0x60
 800063c:	4831      	ldr	r0, [pc, #196]	; (8000704 <MX_GPIO_Init+0x150>)
 800063e:	f000 ffa1 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f641 0106 	movw	r1, #6150	; 0x1806
 8000648:	482f      	ldr	r0, [pc, #188]	; (8000708 <MX_GPIO_Init+0x154>)
 800064a:	f000 ff9b 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x158>)
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4828      	ldr	r0, [pc, #160]	; (8000704 <MX_GPIO_Init+0x150>)
 8000664:	f000 fdce 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 8000668:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fdbe 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <MX_GPIO_Init+0x150>)
 80006a0:	f000 fdb0 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80006a4:	f641 0306 	movw	r3, #6150	; 0x1806
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_GPIO_Init+0x154>)
 80006be:	f000 fda1 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80006c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0x154>)
 80006d8:	f000 fd94 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x150>)
 80006f2:	f000 fd87 	bl	8001204 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800
 8000708:	48000400 	.word	0x48000400
 800070c:	10210000 	.word	0x10210000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fbf2 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f7ff fed6 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff4a 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fb50 	bl	8000dc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
#else
  Pingpong();
 8000724:	f000 f808 	bl	8000738 <Pingpong>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x18>

0800072a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @return None
  */
void Error_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <Pingpong>:
/**
@brief Pingpong, game logic and game states of Pingpong
@param void
@return void, no return value
**/
void Pingpong(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
	uint8_t Led; // LED nr

	uint8_t L_points; // Left players points
	uint8_t R_points; // Right players points

	State = Start; // Initiate State to Start
 800073e:	4baa      	ldr	r3, [pc, #680]	; (80009e8 <Pingpong+0x2b0>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	NextState = Start;
 8000744:	4ba9      	ldr	r3, [pc, #676]	; (80009ec <Pingpong+0x2b4>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]

	const uint32_t MAX_SPEED = 250000;
 800074a:	4ba9      	ldr	r3, [pc, #676]	; (80009f0 <Pingpong+0x2b8>)
 800074c:	60fb      	str	r3, [r7, #12]
	const uint32_t MIN_SPEED = 500000;
 800074e:	4ba9      	ldr	r3, [pc, #676]	; (80009f4 <Pingpong+0x2bc>)
 8000750:	60bb      	str	r3, [r7, #8]
	const uint32_t CHANGE_OF_SPEED = 25000;
 8000752:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000756:	607b      	str	r3, [r7, #4]
	Speed = MIN_SPEED; // Number of loops
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	while(1) {

		State = NextState;
 800075c:	4ba3      	ldr	r3, [pc, #652]	; (80009ec <Pingpong+0x2b4>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4ba1      	ldr	r3, [pc, #644]	; (80009e8 <Pingpong+0x2b0>)
 8000762:	701a      	strb	r2, [r3, #0]

		switch (State) { // State machine
 8000764:	4ba0      	ldr	r3, [pc, #640]	; (80009e8 <Pingpong+0x2b0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b04      	cmp	r3, #4
 800076a:	f200 813a 	bhi.w	80009e2 <Pingpong+0x2aa>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <Pingpong+0x3c>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000789 	.word	0x08000789
 8000778:	080007f7 	.word	0x080007f7
 800077c:	0800088d 	.word	0x0800088d
 8000780:	08000989 	.word	0x08000989
 8000784:	08000923 	.word	0x08000923

		case Start: {
			Led_on(0); // Turn off all LEDs
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f935 	bl	80009f8 <Led_on>
			L_points = 0; // Set points to 0
 800078e:	2300      	movs	r3, #0
 8000790:	74bb      	strb	r3, [r7, #18]
			R_points = 0; // Set points to 0
 8000792:	2300      	movs	r3, #0
 8000794:	747b      	strb	r3, [r7, #17]
			Serve_L = true; // R player turn
 8000796:	2301      	movs	r3, #1
 8000798:	77bb      	strb	r3, [r7, #30]
			ButtonPressed = false;
 800079a:	2300      	movs	r3, #0
 800079c:	77fb      	strb	r3, [r7, #31]
			Speed = MIN_SPEED;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	617b      	str	r3, [r7, #20]

			if(L_hit() == true) { // L serve
 80007a2:	f000 fa63 	bl	8000c6c <L_hit>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00d      	beq.n	80007c8 <Pingpong+0x90>
				Led = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	74fb      	strb	r3, [r7, #19]
				Serve_L = false; // If left serve, left can't serve next time
 80007b0:	2300      	movs	r3, #0
 80007b2:	77bb      	strb	r3, [r7, #30]
				NextState = MoveRight;
 80007b4:	4b8d      	ldr	r3, [pc, #564]	; (80009ec <Pingpong+0x2b4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
				while (L_hit() == true); // wait until button is released
 80007ba:	bf00      	nop
 80007bc:	f000 fa56 	bl	8000c6c <L_hit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1fa      	bne.n	80007bc <Pingpong+0x84>
				while (R_hit() == true); // wait until button is released
			}
			else
				NextState = Start; // Stay in Start state
		}
		break;
 80007c6:	e10d      	b.n	80009e4 <Pingpong+0x2ac>
			else if (R_hit() == true) { // R serve
 80007c8:	f000 fa62 	bl	8000c90 <R_hit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00d      	beq.n	80007ee <Pingpong+0xb6>
				Led = 8;
 80007d2:	2308      	movs	r3, #8
 80007d4:	74fb      	strb	r3, [r7, #19]
				Serve_L = true;		// Left player's turn next time
 80007d6:	2301      	movs	r3, #1
 80007d8:	77bb      	strb	r3, [r7, #30]
				NextState = MoveLeft;
 80007da:	4b84      	ldr	r3, [pc, #528]	; (80009ec <Pingpong+0x2b4>)
 80007dc:	2202      	movs	r2, #2
 80007de:	701a      	strb	r2, [r3, #0]
				while (R_hit() == true); // wait until button is released
 80007e0:	bf00      	nop
 80007e2:	f000 fa55 	bl	8000c90 <R_hit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <Pingpong+0xaa>
		break;
 80007ec:	e0fa      	b.n	80009e4 <Pingpong+0x2ac>
				NextState = Start; // Stay in Start state
 80007ee:	4b7f      	ldr	r3, [pc, #508]	; (80009ec <Pingpong+0x2b4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		break;
 80007f4:	e0f6      	b.n	80009e4 <Pingpong+0x2ac>

		case MoveRight: {
			Led_on(Led);
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8fd 	bl	80009f8 <Led_on>
			Varv = Speed;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	61bb      	str	r3, [r7, #24]

			while(Varv != 0) {
 8000802:	e009      	b.n	8000818 <Pingpong+0xe0>
				if(R_hit()) ButtonPressed = true; // R hit
 8000804:	f000 fa44 	bl	8000c90 <R_hit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <Pingpong+0xda>
 800080e:	2301      	movs	r3, #1
 8000810:	77fb      	strb	r3, [r7, #31]
				Varv --;
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	3b01      	subs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
			while(Varv != 0) {
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f2      	bne.n	8000804 <Pingpong+0xcc>
			}

			if(ButtonPressed) { // R pressed
 800081e:	7ffb      	ldrb	r3, [r7, #31]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d01a      	beq.n	800085a <Pingpong+0x122>
				if(Led == 8) { // and LED8 activated
 8000824:	7cfb      	ldrb	r3, [r7, #19]
 8000826:	2b08      	cmp	r3, #8
 8000828:	d110      	bne.n	800084c <Pingpong+0x114>
					if(Speed <= MAX_SPEED)
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	429a      	cmp	r2, r3
 8000830:	d802      	bhi.n	8000838 <Pingpong+0x100>
						Speed = MAX_SPEED;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e003      	b.n	8000840 <Pingpong+0x108>
					else
						Speed -= CHANGE_OF_SPEED;
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
					NextState = MoveLeft; // return ball
 8000840:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <Pingpong+0x2b4>)
 8000842:	2202      	movs	r2, #2
 8000844:	701a      	strb	r2, [r3, #0]
					Led = 7;
 8000846:	2307      	movs	r3, #7
 8000848:	74fb      	strb	r3, [r7, #19]
 800084a:	e013      	b.n	8000874 <Pingpong+0x13c>
				}
				else {
					L_points++;
 800084c:	7cbb      	ldrb	r3, [r7, #18]
 800084e:	3301      	adds	r3, #1
 8000850:	74bb      	strb	r3, [r7, #18]
					NextState = ShowPoints; // hit too early
 8000852:	4b66      	ldr	r3, [pc, #408]	; (80009ec <Pingpong+0x2b4>)
 8000854:	2204      	movs	r2, #4
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e00c      	b.n	8000874 <Pingpong+0x13c>
				}
			}
			else {
				if(Led == 9) { // no hit or too late
 800085a:	7cfb      	ldrb	r3, [r7, #19]
 800085c:	2b09      	cmp	r3, #9
 800085e:	d106      	bne.n	800086e <Pingpong+0x136>
					L_points++;
 8000860:	7cbb      	ldrb	r3, [r7, #18]
 8000862:	3301      	adds	r3, #1
 8000864:	74bb      	strb	r3, [r7, #18]
					NextState = ShowPoints;
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <Pingpong+0x2b4>)
 8000868:	2204      	movs	r2, #4
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e002      	b.n	8000874 <Pingpong+0x13c>
				}

				else
					NextState = MoveRight; // ball continues to move right
 800086e:	4b5f      	ldr	r3, [pc, #380]	; (80009ec <Pingpong+0x2b4>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
			}
			if(!ButtonPressed) Led++; // prepare to turn next LED on
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <Pingpong+0x14e>
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	3301      	adds	r3, #1
 8000884:	74fb      	strb	r3, [r7, #19]
			ButtonPressed = false;
 8000886:	2300      	movs	r3, #0
 8000888:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800088a:	e0ab      	b.n	80009e4 <Pingpong+0x2ac>

		case MoveLeft: {
			Led_on(Led);
 800088c:	7cfb      	ldrb	r3, [r7, #19]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f8b2 	bl	80009f8 <Led_on>
			Varv = Speed;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	61bb      	str	r3, [r7, #24]

			while(Varv != 0) {
 8000898:	e009      	b.n	80008ae <Pingpong+0x176>
				if(L_hit()) ButtonPressed = true; // L hit
 800089a:	f000 f9e7 	bl	8000c6c <L_hit>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <Pingpong+0x170>
 80008a4:	2301      	movs	r3, #1
 80008a6:	77fb      	strb	r3, [r7, #31]
				Varv--;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
			while(Varv != 0) {
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f2      	bne.n	800089a <Pingpong+0x162>
			}

			if(ButtonPressed) { // L pressed
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d01a      	beq.n	80008f0 <Pingpong+0x1b8>
				if(Led == 1) { // and LED1 active
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d110      	bne.n	80008e2 <Pingpong+0x1aa>
					if(Speed <= MAX_SPEED)
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d802      	bhi.n	80008ce <Pingpong+0x196>
						Speed = MAX_SPEED;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e003      	b.n	80008d6 <Pingpong+0x19e>
					else
						Speed -= CHANGE_OF_SPEED;
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]
					NextState = MoveRight; // return ball
 80008d6:	4b45      	ldr	r3, [pc, #276]	; (80009ec <Pingpong+0x2b4>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
					Led = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	74fb      	strb	r3, [r7, #19]
 80008e0:	e013      	b.n	800090a <Pingpong+0x1d2>
				}

				else {
					R_points++;
 80008e2:	7c7b      	ldrb	r3, [r7, #17]
 80008e4:	3301      	adds	r3, #1
 80008e6:	747b      	strb	r3, [r7, #17]
					NextState = ShowPoints; // hit too early
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <Pingpong+0x2b4>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e00c      	b.n	800090a <Pingpong+0x1d2>
				}
			}

			else {
				if(Led == 0) { // no hit or too late
 80008f0:	7cfb      	ldrb	r3, [r7, #19]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d106      	bne.n	8000904 <Pingpong+0x1cc>
					R_points++;
 80008f6:	7c7b      	ldrb	r3, [r7, #17]
 80008f8:	3301      	adds	r3, #1
 80008fa:	747b      	strb	r3, [r7, #17]
					NextState = ShowPoints;
 80008fc:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <Pingpong+0x2b4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e002      	b.n	800090a <Pingpong+0x1d2>
				}

				else
					NextState = MoveLeft; // ball continues to move left
 8000904:	4b39      	ldr	r3, [pc, #228]	; (80009ec <Pingpong+0x2b4>)
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]
			}

			if(!ButtonPressed) Led--; // prepare to turn next LED on
 800090a:	7ffb      	ldrb	r3, [r7, #31]
 800090c:	f083 0301 	eor.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <Pingpong+0x1e4>
 8000916:	7cfb      	ldrb	r3, [r7, #19]
 8000918:	3b01      	subs	r3, #1
 800091a:	74fb      	strb	r3, [r7, #19]
			ButtonPressed = false;
 800091c:	2300      	movs	r3, #0
 800091e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8000920:	e060      	b.n	80009e4 <Pingpong+0x2ac>

		case ShowPoints: {
			Show_points(4, 4);
 8000922:	2104      	movs	r1, #4
 8000924:	2004      	movs	r0, #4
 8000926:	f000 f977 	bl	8000c18 <Show_points>
			HAL_Delay(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092e:	f000 fb61 	bl	8000ff4 <HAL_Delay>
			Led_on(0); // turn off leds
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f860 	bl	80009f8 <Led_on>

			if(L_points == 4 || R_points == 4 ) { // Show winner and reset game to start
 8000938:	7cbb      	ldrb	r3, [r7, #18]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d002      	beq.n	8000944 <Pingpong+0x20c>
 800093e:	7c7b      	ldrb	r3, [r7, #17]
 8000940:	2b04      	cmp	r3, #4
 8000942:	d110      	bne.n	8000966 <Pingpong+0x22e>
				Show_points(L_points, R_points);
 8000944:	7c7a      	ldrb	r2, [r7, #17]
 8000946:	7cbb      	ldrb	r3, [r7, #18]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f964 	bl	8000c18 <Show_points>
				HAL_Delay(5000);	// 5000 ms (5 s)
 8000950:	f241 3088 	movw	r0, #5000	; 0x1388
 8000954:	f000 fb4e 	bl	8000ff4 <HAL_Delay>
				Led_on(0); // turn off leds
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f84d 	bl	80009f8 <Led_on>
				NextState = Start;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <Pingpong+0x2b4>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);	// 2000 ms (2 s)
				Led_on(0); // turn off leds
				NextState = Serve;
			}
		}
		break;
 8000964:	e03e      	b.n	80009e4 <Pingpong+0x2ac>
				Show_points(L_points, R_points);
 8000966:	7c7a      	ldrb	r2, [r7, #17]
 8000968:	7cbb      	ldrb	r3, [r7, #18]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f953 	bl	8000c18 <Show_points>
				HAL_Delay(3000);	// 2000 ms (2 s)
 8000972:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000976:	f000 fb3d 	bl	8000ff4 <HAL_Delay>
				Led_on(0); // turn off leds
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f83c 	bl	80009f8 <Led_on>
				NextState = Serve;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <Pingpong+0x2b4>)
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
		break;
 8000986:	e02d      	b.n	80009e4 <Pingpong+0x2ac>

		case Serve: {

			Speed = MIN_SPEED;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	617b      	str	r3, [r7, #20]

			if (Serve_L == true) { // left player serves
 800098c:	7fbb      	ldrb	r3, [r7, #30]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d013      	beq.n	80009ba <Pingpong+0x282>
				Serve_L = false;
 8000992:	2300      	movs	r3, #0
 8000994:	77bb      	strb	r3, [r7, #30]
				Led_on(1);
 8000996:	2001      	movs	r0, #1
 8000998:	f000 f82e 	bl	80009f8 <Led_on>
				Led = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	74fb      	strb	r3, [r7, #19]
				NextState = MoveRight;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <Pingpong+0x2b4>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
				while (L_hit() != true); // wait until button is pressed
 80009a6:	bf00      	nop
 80009a8:	f000 f960 	bl	8000c6c <L_hit>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f7      	bne.n	80009a8 <Pingpong+0x270>
				Led = 8;
				NextState = MoveLeft;
				while (R_hit() != true); // wait until button is pressed
			}
		}
		break;
 80009b8:	e014      	b.n	80009e4 <Pingpong+0x2ac>
				Serve_L = true;
 80009ba:	2301      	movs	r3, #1
 80009bc:	77bb      	strb	r3, [r7, #30]
				Led_on(8);
 80009be:	2008      	movs	r0, #8
 80009c0:	f000 f81a 	bl	80009f8 <Led_on>
				Led = 8;
 80009c4:	2308      	movs	r3, #8
 80009c6:	74fb      	strb	r3, [r7, #19]
				NextState = MoveLeft;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <Pingpong+0x2b4>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	701a      	strb	r2, [r3, #0]
				while (R_hit() != true); // wait until button is pressed
 80009ce:	bf00      	nop
 80009d0:	f000 f95e 	bl	8000c90 <R_hit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f083 0301 	eor.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f7      	bne.n	80009d0 <Pingpong+0x298>
		break;
 80009e0:	e000      	b.n	80009e4 <Pingpong+0x2ac>

		default:
			break;
 80009e2:	bf00      	nop
		State = NextState;
 80009e4:	e6ba      	b.n	800075c <Pingpong+0x24>
 80009e6:	bf00      	nop
 80009e8:	20000028 	.word	0x20000028
 80009ec:	20000029 	.word	0x20000029
 80009f0:	0003d090 	.word	0x0003d090
 80009f4:	0007a120 	.word	0x0007a120

080009f8 <Led_on>:
@brief Led_on, turn one of the pingpong leds on
@param uint8_t Lednr , number to the Led that is turned on
 Lednr can be 1-8, all other values turns all leds off
@return void
*/
void Led_on(uint8_t Lednr) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 1; i <= 8; i++) {
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e0a6      	b.n	8000b56 <Led_on+0x15e>
		switch(i) {
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	2b07      	cmp	r3, #7
 8000a0e:	f200 809f 	bhi.w	8000b50 <Led_on+0x158>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <Led_on+0x20>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a39 	.word	0x08000a39
 8000a1c:	08000a59 	.word	0x08000a59
 8000a20:	08000a79 	.word	0x08000a79
 8000a24:	08000a9d 	.word	0x08000a9d
 8000a28:	08000ac1 	.word	0x08000ac1
 8000a2c:	08000ae9 	.word	0x08000ae9
 8000a30:	08000b11 	.word	0x08000b11
 8000a34:	08000b31 	.word	0x08000b31
		case 1: // Led 1
			if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d105      	bne.n	8000a4c <Led_on+0x54>
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	4848      	ldr	r0, [pc, #288]	; (8000b68 <Led_on+0x170>)
 8000a46:	f000 fd9d 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			break;
 8000a4a:	e081      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4845      	ldr	r0, [pc, #276]	; (8000b68 <Led_on+0x170>)
 8000a52:	f000 fd97 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000a56:	e07b      	b.n	8000b50 <Led_on+0x158>
		case 2: // Led 2
			if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d105      	bne.n	8000a6c <Led_on+0x74>
 8000a60:	2201      	movs	r2, #1
 8000a62:	2104      	movs	r1, #4
 8000a64:	4840      	ldr	r0, [pc, #256]	; (8000b68 <Led_on+0x170>)
 8000a66:	f000 fd8d 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
			break;
 8000a6a:	e071      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	483d      	ldr	r0, [pc, #244]	; (8000b68 <Led_on+0x170>)
 8000a72:	f000 fd87 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000a76:	e06b      	b.n	8000b50 <Led_on+0x158>
		case 3: // Led 3
			if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d106      	bne.n	8000a8e <Led_on+0x96>
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4838      	ldr	r0, [pc, #224]	; (8000b68 <Led_on+0x170>)
 8000a88:	f000 fd7c 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
 8000a8c:	e060      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4834      	ldr	r0, [pc, #208]	; (8000b68 <Led_on+0x170>)
 8000a96:	f000 fd75 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000a9a:	e059      	b.n	8000b50 <Led_on+0x158>
		case 4: // Led 4
			if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d106      	bne.n	8000ab2 <Led_on+0xba>
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	482f      	ldr	r0, [pc, #188]	; (8000b68 <Led_on+0x170>)
 8000aac:	f000 fd6a 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
			break;
 8000ab0:	e04e      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	482b      	ldr	r0, [pc, #172]	; (8000b68 <Led_on+0x170>)
 8000aba:	f000 fd63 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000abe:	e047      	b.n	8000b50 <Led_on+0x158>
		case 5: // Led 5
			if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000ac0:	79fa      	ldrb	r2, [r7, #7]
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d107      	bne.n	8000ad8 <Led_on+0xe0>
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fd57 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
			break;
 8000ad6:	e03b      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fd4f 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000ae6:	e033      	b.n	8000b50 <Led_on+0x158>
		case 6: // Led 6
			if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000ae8:	79fa      	ldrb	r2, [r7, #7]
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d107      	bne.n	8000b00 <Led_on+0x108>
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fd43 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
			break;
 8000afe:	e027      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 fd3b 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000b0e:	e01f      	b.n	8000b50 <Led_on+0x158>
		case 7: // Led 7
			if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d105      	bne.n	8000b24 <Led_on+0x12c>
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <Led_on+0x174>)
 8000b1e:	f000 fd31 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
			break;
 8000b22:	e015      	b.n	8000b50 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2120      	movs	r1, #32
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <Led_on+0x174>)
 8000b2a:	f000 fd2b 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000b2e:	e00f      	b.n	8000b50 <Led_on+0x158>
		case 8: // Led 8
			if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d105      	bne.n	8000b44 <Led_on+0x14c>
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <Led_on+0x174>)
 8000b3e:	f000 fd21 	bl	8001584 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
			break;
 8000b42:	e004      	b.n	8000b4e <Led_on+0x156>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <Led_on+0x174>)
 8000b4a:	f000 fd1b 	bl	8001584 <HAL_GPIO_WritePin>
			break;
 8000b4e:	bf00      	nop
	for(i = 1; i <= 8; i++) {
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	3301      	adds	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	f67f af55 	bls.w	8000a08 <Led_on+0x10>
		default:
			;
		} // end of switch
	} // end for-loop
	return;
 8000b5e:	bf00      	nop
} // End of functions Led_on
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800

08000b70 <setLed>:

void setLed(uint8_t led) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
		if (led==1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d104      	bne.n	8000b8a <setLed+0x1a>
 8000b80:	2201      	movs	r2, #1
 8000b82:	2102      	movs	r1, #2
 8000b84:	4822      	ldr	r0, [pc, #136]	; (8000c10 <setLed+0xa0>)
 8000b86:	f000 fcfd 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==2) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d104      	bne.n	8000b9a <setLed+0x2a>
 8000b90:	2201      	movs	r2, #1
 8000b92:	2104      	movs	r1, #4
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <setLed+0xa0>)
 8000b96:	f000 fcf5 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==3) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d105      	bne.n	8000bac <setLed+0x3c>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	481a      	ldr	r0, [pc, #104]	; (8000c10 <setLed+0xa0>)
 8000ba8:	f000 fcec 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==4) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d105      	bne.n	8000bbe <setLed+0x4e>
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <setLed+0xa0>)
 8000bba:	f000 fce3 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==5) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d106      	bne.n	8000bd2 <setLed+0x62>
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 fcd9 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==6) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d106      	bne.n	8000be6 <setLed+0x76>
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f000 fccf 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==7) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	d104      	bne.n	8000bf6 <setLed+0x86>
 8000bec:	2201      	movs	r2, #1
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <setLed+0xa4>)
 8000bf2:	f000 fcc7 	bl	8001584 <HAL_GPIO_WritePin>
		if (led==8) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d105      	bne.n	8000c08 <setLed+0x98>
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <setLed+0xa4>)
 8000c02:	f000 fcbf 	bl	8001584 <HAL_GPIO_WritePin>
		return;
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
}
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800

08000c18 <Show_points>:
@param1 uint8_t L_points points for left player
@param2 uint8_t R_points points for right player
@return void, no return value
 */

void Show_points(uint8_t L_points, uint8_t R_points) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 1; i <= L_points; i++) {
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e006      	b.n	8000c3c <Show_points+0x24>
		setLed(i);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff9d 	bl	8000b70 <setLed>
	for (uint8_t i = 1; i <= L_points; i++) {
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d9f4      	bls.n	8000c2e <Show_points+0x16>
	}
	for(uint8_t j = 8; j > 8-R_points; j--) {
 8000c44:	2308      	movs	r3, #8
 8000c46:	73bb      	strb	r3, [r7, #14]
 8000c48:	e006      	b.n	8000c58 <Show_points+0x40>
		setLed(j);
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff8f 	bl	8000b70 <setLed>
	for(uint8_t j = 8; j > 8-R_points; j--) {
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]
 8000c58:	7bba      	ldrb	r2, [r7, #14]
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	f1c3 0308 	rsb	r3, r3, #8
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dcf2      	bgt.n	8000c4a <Show_points+0x32>
	}
	return;
 8000c64:	bf00      	nop
}
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <L_hit>:
/**
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
*/
bool L_hit(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(L_button_GPIO_Port, L_button_Pin) == 0) return true;
 8000c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <L_hit+0x20>)
 8000c76:	f000 fc6d 	bl	8001554 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <L_hit+0x18>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <L_hit+0x1a>
	else return false;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	48000400 	.word	0x48000400

08000c90 <R_hit>:
/**
@brief R_hit, check if R button is pressed
@param void
@return bool, true if R button pushed, false otherwise
*/
bool R_hit(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(R_button_GPIO_Port, R_button_Pin) == 0) return true;
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <R_hit+0x20>)
 8000c9a:	f000 fc5b 	bl	8001554 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <R_hit+0x18>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <R_hit+0x1a>
	else return false;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	48000800 	.word	0x48000800

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f930 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <SystemInit+0x64>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <SystemInit+0x64>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SystemInit+0x68>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <SystemInit+0x68>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SystemInit+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <SystemInit+0x68>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SystemInit+0x68>)
 8000d84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <SystemInit+0x68>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SystemInit+0x68>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <SystemInit+0x68>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <SystemInit+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SystemInit+0x64>)
 8000daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dae:	609a      	str	r2, [r3, #8]
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_USART2_UART_Init+0x5c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART2_UART_Init+0x58>)
 8000e08:	f001 fed2 	bl	8002bb0 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e12:	f7ff fc8a 	bl	800072a <Error_Handler>
  }

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000002c 	.word	0x2000002c
 8000e20:	40004400 	.word	0x40004400

08000e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x7c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d128      	bne.n	8000e98 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_UART_MspInit+0x80>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e76:	230c      	movs	r3, #12
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e86:	2307      	movs	r3, #7
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f000 f9b6 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff ff54 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ec0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ec2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ecc:	f842 3b04 	str.w	r3, [r2], #4

08000ed0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ed2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 faa5 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff fc19 	bl	8000710 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ee4:	080034ec 	.word	0x080034ec
	ldr	r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eec:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ef4:	200000b0 	.word	0x200000b0

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_Init+0x3c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_Init+0x3c>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f942 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f80f 	bl	8000f3c <HAL_InitTick>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	e001      	b.n	8000f2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2a:	f7ff fec3 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_InitTick+0x6c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d023      	beq.n	8000f98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_InitTick+0x70>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f93f 	bl	80011ea <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10f      	bne.n	8000f92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d809      	bhi.n	8000f8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f917 	bl	80011b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_InitTick+0x74>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e007      	b.n	8000f9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e004      	b.n	8000f9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e001      	b.n	8000f9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	200000ac 	.word	0x200000ac

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200000ac 	.word	0x200000ac

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_Delay+0x40>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff47 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff5c 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb0 	bl	8001158 <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e17f      	b.n	8001514 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8171 	beq.w	800150e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00b      	beq.n	800124c <HAL_GPIO_Init+0x48>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001240:	2b11      	cmp	r3, #17
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d118      	bne.n	80012ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x128>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	6939      	ldr	r1, [r7, #16]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80ac 	beq.w	800150e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <HAL_GPIO_Init+0x32c>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a5d      	ldr	r2, [pc, #372]	; (8001530 <HAL_GPIO_Init+0x32c>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <HAL_GPIO_Init+0x32c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ce:	4a59      	ldr	r2, [pc, #356]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x242>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4e      	ldr	r2, [pc, #312]	; (8001538 <HAL_GPIO_Init+0x334>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4d      	ldr	r2, [pc, #308]	; (800153c <HAL_GPIO_Init+0x338>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_GPIO_Init+0x33c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4b      	ldr	r2, [pc, #300]	; (8001544 <HAL_GPIO_Init+0x340>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_GPIO_Init+0x344>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a49      	ldr	r2, [pc, #292]	; (800154c <HAL_GPIO_Init+0x348>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x22a>
 800142a:	2306      	movs	r3, #6
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800142e:	2307      	movs	r3, #7
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001446:	2300      	movs	r3, #0
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001458:	4936      	ldr	r1, [pc, #216]	; (8001534 <HAL_GPIO_Init+0x330>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_GPIO_Init+0x34c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800148a:	4a31      	ldr	r2, [pc, #196]	; (8001550 <HAL_GPIO_Init+0x34c>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x34c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_GPIO_Init+0x34c>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_GPIO_Init+0x34c>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_GPIO_Init+0x34c>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_GPIO_Init+0x34c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_GPIO_Init+0x34c>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae78 	bne.w	8001214 <HAL_GPIO_Init+0x10>
  }
}
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e001      	b.n	8001576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015de:	d130      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ec:	d038      	beq.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2232      	movs	r2, #50	; 0x32
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001614:	e002      	b.n	800161c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b01      	subs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001628:	d102      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f2      	bne.n	8001616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163c:	d110      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e00f      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d007      	beq.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000
 8001674:	20000000 	.word	0x20000000
 8001678:	431bde83 	.word	0x431bde83

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e3d4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4ba1      	ldr	r3, [pc, #644]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001698:	4b9e      	ldr	r3, [pc, #632]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80e4 	beq.w	8001878 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4a>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	f040 808b 	bne.w	80017d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f040 8087 	bne.w	80017d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c6:	4b93      	ldr	r3, [pc, #588]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e3ac      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <HAL_RCC_OscConfig+0x7c>
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f6:	e005      	b.n	8001704 <HAL_RCC_OscConfig+0x88>
 80016f8:	4b86      	ldr	r3, [pc, #536]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001704:	4293      	cmp	r3, r2
 8001706:	d223      	bcs.n	8001750 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fd3f 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e38d      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171c:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4977      	ldr	r1, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173a:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	4972      	ldr	r1, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e025      	b.n	800179c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6f      	ldr	r2, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	496a      	ldr	r1, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	4b69      	ldr	r3, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4965      	ldr	r1, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fcff 	bl	8002190 <RCC_SetFlashLatencyFromMSIRange>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e34d      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800179c:	f000 fc36 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80017a0:	4601      	mov	r1, r0
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x29c>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x2a0>)
 80017ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x2a4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fbbb 	bl	8000f3c <HAL_InitTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d052      	beq.n	8001876 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	e331      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d032      	beq.n	8001842 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbf8 	bl	8000fdc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbf4 	bl	8000fdc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e31a      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	493b      	ldr	r1, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	4936      	ldr	r1, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e01a      	b.n	8001878 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800184e:	f7ff fbc5 	bl	8000fdc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001856:	f7ff fbc1 	bl	8000fdc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e2e7      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x1da>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001876:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d074      	beq.n	800196e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b08      	cmp	r3, #8
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x21a>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d10e      	bne.n	80018ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d064      	beq.n	800196c <HAL_RCC_OscConfig+0x2f0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d160      	bne.n	800196c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e2c4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x24a>
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a15      	ldr	r2, [pc, #84]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e01d      	b.n	8001902 <HAL_RCC_OscConfig+0x286>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x26e>
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x286>
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x298>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fb67 	bl	8000fdc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001910:	e011      	b.n	8001936 <HAL_RCC_OscConfig+0x2ba>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	08003494 	.word	0x08003494
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fb5a 	bl	8000fdc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e280      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4baf      	ldr	r3, [pc, #700]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x2a8>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb4a 	bl	8000fdc <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fb46 	bl	8000fdc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e26c      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195e:	4ba5      	ldr	r3, [pc, #660]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x2d0>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x310>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d119      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198c:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x328>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e249      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	4990      	ldr	r1, [pc, #576]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	e040      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d023      	beq.n	8001a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c2:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a8b      	ldr	r2, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fb05 	bl	8000fdc <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff fb01 	bl	8000fdc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e227      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	497c      	ldr	r1, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e018      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b7a      	ldr	r3, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a79      	ldr	r2, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fae1 	bl	8000fdc <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fadd 	bl	8000fdc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e203      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a30:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a56:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fabc 	bl	8000fdc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fab8 	bl	8000fdc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1de      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3ec>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa9f 	bl	8000fdc <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa9b 	bl	8000fdc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1c1      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a6 	beq.w	8001c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a43      	ldr	r2, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d118      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa62 	bl	8000fdc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7ff fa5e 	bl	8000fdc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e184      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x57c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d8>
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b52:	e024      	b.n	8001b9e <HAL_RCC_OscConfig+0x522>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d110      	bne.n	8001b7e <HAL_RCC_OscConfig+0x502>
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7c:	e00f      	b.n	8001b9e <HAL_RCC_OscConfig+0x522>
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa19 	bl	8000fdc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fa15 	bl	8000fdc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e139      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ed      	beq.n	8001bae <HAL_RCC_OscConfig+0x532>
 8001bd2:	e01a      	b.n	8001c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa02 	bl	8000fdc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9fe 	bl	8000fdc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d906      	bls.n	8001bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e122      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bfc:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e8      	bne.n	8001bdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	4a8a      	ldr	r2, [pc, #552]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8108 	beq.w	8001e36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	f040 80d0 	bne.w	8001dd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c30:	4b83      	ldr	r3, [pc, #524]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d130      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d127      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	2a07      	cmp	r2, #7
 8001c72:	bf14      	ite	ne
 8001c74:	2201      	movne	r2, #1
 8001c76:	2200      	moveq	r2, #0
 8001c78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d113      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d06e      	beq.n	8001d84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d069      	beq.n	8001d80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b7      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd4:	f7ff f982 	bl	8000fdc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f97e 	bl	8000fdc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0a4      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cee:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HAL_RCC_OscConfig+0x7c8>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d14:	0212      	lsls	r2, r2, #8
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d1c:	0852      	lsrs	r2, r2, #1
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	0552      	lsls	r2, r2, #21
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d28:	0852      	lsrs	r2, r2, #1
 8001d2a:	3a01      	subs	r2, #1
 8001d2c:	0652      	lsls	r2, r2, #25
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d34:	0912      	lsrs	r2, r2, #4
 8001d36:	0452      	lsls	r2, r2, #17
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	4941      	ldr	r1, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a3b      	ldr	r2, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d58:	f7ff f940 	bl	8000fdc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f93c 	bl	8000fdc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e062      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7e:	e05a      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e059      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d152      	bne.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001da8:	f7ff f918 	bl	8000fdc <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f914 	bl	8000fdc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e03a      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x734>
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d02d      	beq.n	8001e32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	f023 0303 	bic.w	r3, r3, #3
 8001df8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001e00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f8e7 	bl	8000fdc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f8e3 	bl	8000fdc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e009      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_OscConfig+0x7c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x796>
 8001e30:	e001      	b.n	8001e36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	f99d808c 	.word	0xf99d808c

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0c8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	4961      	ldr	r1, [pc, #388]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b0      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d04c      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d121      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e09e      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d115      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e092      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e086      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07e      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 0203 	bic.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	493f      	ldr	r1, [pc, #252]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f02:	f7ff f86b 	bl	8000fdc <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7ff f867 	bl	8000fdc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e066      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 020c 	and.w	r2, r3, #12
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d1eb      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d210      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4924      	ldr	r1, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e036      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4910      	ldr	r1, [pc, #64]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fbe:	f000 f825 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe ffaa 	bl	8000f3c <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003494 	.word	0x08003494
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d121      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d11e      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e005      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 8002092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d133      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020b2:	617b      	str	r3, [r7, #20]
      break;
 80020b4:	e005      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	617b      	str	r3, [r7, #20]
      break;
 80020c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	3301      	adds	r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	fb02 f203 	mul.w	r2, r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002102:	69bb      	ldr	r3, [r7, #24]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	080034ac 	.word	0x080034ac
 8002118:	00f42400 	.word	0x00f42400
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4601      	mov	r1, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	080034a4 	.word	0x080034a4

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002168:	f7ff ffda 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_GetPCLK2Freq+0x28>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080034a4 	.word	0x080034a4

08002190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a8:	f7ff fa04 	bl	80015b4 <HAL_PWREx_GetVoltageRange>
 80021ac:	6178      	str	r0, [r7, #20]
 80021ae:	e014      	b.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c8:	f7ff f9f4 	bl	80015b4 <HAL_PWREx_GetVoltageRange>
 80021cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d10b      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d919      	bls.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2ba0      	cmp	r3, #160	; 0xa0
 80021ec:	d902      	bls.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ee:	2302      	movs	r3, #2
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e013      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e010      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d902      	bls.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002200:	2303      	movs	r3, #3
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e00a      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d102      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e004      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d101      	bne.n	800221c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 0207 	bic.w	r2, r3, #7
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002258:	2300      	movs	r3, #0
 800225a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800225c:	2300      	movs	r3, #0
 800225e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03f      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002274:	d01c      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227a:	d802      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002280:	e01f      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002286:	d003      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800228c:	d01c      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800228e:	e018      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a84      	ldr	r2, [pc, #528]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800229c:	e015      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fab9 	bl	800281c <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3320      	adds	r3, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fba0 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	4972      	ldr	r1, [pc, #456]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d01c      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002306:	d802      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800230c:	e01f      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800230e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002312:	d003      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002314:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002318:	d01c      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800231a:	e018      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a61      	ldr	r2, [pc, #388]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002328:	e015      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fa73 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233a:	e00c      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3320      	adds	r3, #32
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fb5a 	bl	80029fc <RCCEx_PLLSAI2_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234c:	e003      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	74fb      	strb	r3, [r7, #19]
      break;
 8002352:	e000      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236a:	494f      	ldr	r1, [pc, #316]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002372:	e001      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a0 	beq.w	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fe08 	bl	8000fdc <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fe04 	bl	8000fdc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	74fb      	strb	r3, [r7, #19]
        break;
 80023e2:	e005      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e4:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ef      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d15c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	d019      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fdc3 	bl	8000fdc <HAL_GetTick>
 8002456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	e00b      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe fdbf 	bl	8000fdc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d902      	bls.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	74fb      	strb	r3, [r7, #19]
            break;
 8002470:	e006      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ec      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
 80024a4:	e006      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b4:	7c7b      	ldrb	r3, [r7, #17]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b9e      	ldr	r3, [pc, #632]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	4a9d      	ldr	r2, [pc, #628]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d2:	4b98      	ldr	r3, [pc, #608]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f023 0203 	bic.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	4994      	ldr	r1, [pc, #592]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 020c 	bic.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	498c      	ldr	r1, [pc, #560]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002516:	4b87      	ldr	r3, [pc, #540]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4983      	ldr	r1, [pc, #524]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002538:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	497b      	ldr	r1, [pc, #492]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	4972      	ldr	r1, [pc, #456]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	496a      	ldr	r1, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	4961      	ldr	r1, [pc, #388]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c0:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	4959      	ldr	r1, [pc, #356]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e2:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	4950      	ldr	r1, [pc, #320]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	4948      	ldr	r1, [pc, #288]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	493f      	ldr	r1, [pc, #252]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d028      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002648:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	4937      	ldr	r1, [pc, #220]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002666:	d106      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a31      	ldr	r2, [pc, #196]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
 8002674:	e011      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800267e:	d10c      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f8c8 	bl	800281c <RCCEx_PLLSAI1_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d028      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	491f      	ldr	r1, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	60d3      	str	r3, [r2, #12]
 80026d2:	e011      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f899 	bl	800281c <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02b      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002722:	d109      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a02      	ldr	r2, [pc, #8]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	e014      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f867 	bl	800281c <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02f      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002776:	4928      	ldr	r1, [pc, #160]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002786:	d10d      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2102      	movs	r1, #2
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f844 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d014      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	74bb      	strb	r3, [r7, #18]
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3320      	adds	r3, #32
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f921 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002806:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800280e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d018      	beq.n	8002868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
       ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
       ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d044      	beq.n	80028ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e041      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d00c      	beq.n	800288a <RCCEx_PLLSAI1_Config+0x6e>
 8002870:	2b03      	cmp	r3, #3
 8002872:	d013      	beq.n	800289c <RCCEx_PLLSAI1_Config+0x80>
 8002874:	2b01      	cmp	r3, #1
 8002876:	d120      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002878:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11d      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002888:	e01a      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e013      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800289c:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b8:	e006      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      break;
 80028be:	e004      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c0:	bf00      	nop
 80028c2:	e002      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c4:	bf00      	nop
 80028c6:	e000      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	430b      	orrs	r3, r1
 80028e6:	4944      	ldr	r1, [pc, #272]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d17d      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fe:	f7fe fb6d 	bl	8000fdc <HAL_GetTick>
 8002902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002904:	e009      	b.n	800291a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002906:	f7fe fb69 	bl	8000fdc <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d902      	bls.n	800291a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	73fb      	strb	r3, [r7, #15]
        break;
 8002918:	e005      	b.n	8002926 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ef      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d160      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	0211      	lsls	r1, r2, #8
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68d2      	ldr	r2, [r2, #12]
 8002948:	0912      	lsrs	r2, r2, #4
 800294a:	0452      	lsls	r2, r2, #17
 800294c:	430a      	orrs	r2, r1
 800294e:	492a      	ldr	r1, [pc, #168]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	610b      	str	r3, [r1, #16]
 8002954:	e027      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d112      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295c:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002964:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	0211      	lsls	r1, r2, #8
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6912      	ldr	r2, [r2, #16]
 8002972:	0852      	lsrs	r2, r2, #1
 8002974:	3a01      	subs	r2, #1
 8002976:	0552      	lsls	r2, r2, #21
 8002978:	430a      	orrs	r2, r1
 800297a:	491f      	ldr	r1, [pc, #124]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	610b      	str	r3, [r1, #16]
 8002980:	e011      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800298a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	0211      	lsls	r1, r2, #8
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6952      	ldr	r2, [r2, #20]
 8002998:	0852      	lsrs	r2, r2, #1
 800299a:	3a01      	subs	r2, #1
 800299c:	0652      	lsls	r2, r2, #25
 800299e:	430a      	orrs	r2, r1
 80029a0:	4915      	ldr	r1, [pc, #84]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fb13 	bl	8000fdc <HAL_GetTick>
 80029b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b8:	e009      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ba:	f7fe fb0f 	bl	8000fdc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d902      	bls.n	80029ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	73fb      	strb	r3, [r7, #15]
          break;
 80029cc:	e005      	b.n	80029da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ef      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	4903      	ldr	r1, [pc, #12]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000

080029fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0a:	4b68      	ldr	r3, [pc, #416]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d044      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e041      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d00c      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x6e>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d013      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x80>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d120      	bne.n	8002a9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a58:	4b54      	ldr	r3, [pc, #336]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11d      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a68:	e01a      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e013      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a98:	e006      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9e:	e004      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	4939      	ldr	r1, [pc, #228]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d167      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a35      	ldr	r2, [pc, #212]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ade:	f7fe fa7d 	bl	8000fdc <HAL_GetTick>
 8002ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ae4:	e009      	b.n	8002afa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ae6:	f7fe fa79 	bl	8000fdc <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d902      	bls.n	8002afa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	73fb      	strb	r3, [r7, #15]
        break;
 8002af8:	e005      	b.n	8002b06 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ef      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d14a      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d111      	bne.n	8002b36 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6892      	ldr	r2, [r2, #8]
 8002b22:	0211      	lsls	r1, r2, #8
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68d2      	ldr	r2, [r2, #12]
 8002b28:	0912      	lsrs	r2, r2, #4
 8002b2a:	0452      	lsls	r2, r2, #17
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	491f      	ldr	r1, [pc, #124]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	614b      	str	r3, [r1, #20]
 8002b34:	e011      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	0211      	lsls	r1, r2, #8
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6912      	ldr	r2, [r2, #16]
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0652      	lsls	r2, r2, #25
 8002b52:	430a      	orrs	r2, r1
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fa39 	bl	8000fdc <HAL_GetTick>
 8002b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b6c:	e009      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b6e:	f7fe fa35 	bl	8000fdc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d902      	bls.n	8002b82 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b80:	e005      	b.n	8002b8e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e040      	b.n	8002c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe f926 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f82c 	bl	8002c4c <UART_SetConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e022      	b.n	8002c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 faaa 	bl	8003160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fb31 	bl	80032a4 <UART_CheckIdleState>
 8002c42:	4603      	mov	r3, r0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4bac      	ldr	r3, [pc, #688]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	69f9      	ldr	r1, [r7, #28]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4aa2      	ldr	r2, [pc, #648]	; (8002f30 <UART_SetConfig+0x2e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a99      	ldr	r2, [pc, #612]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d121      	bne.n	8002d18 <UART_SetConfig+0xcc>
 8002cd4:	4b98      	ldr	r3, [pc, #608]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d816      	bhi.n	8002d10 <UART_SetConfig+0xc4>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0x9c>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002cff 	.word	0x08002cff
 8002cf4:	08002d0b 	.word	0x08002d0b
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	76fb      	strb	r3, [r7, #27]
 8002cfc:	e0e8      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	76fb      	strb	r3, [r7, #27]
 8002d02:	e0e5      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d04:	2304      	movs	r3, #4
 8002d06:	76fb      	strb	r3, [r7, #27]
 8002d08:	e0e2      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	76fb      	strb	r3, [r7, #27]
 8002d0e:	e0df      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d10:	2310      	movs	r3, #16
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	bf00      	nop
 8002d16:	e0db      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <UART_SetConfig+0x2f0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d134      	bne.n	8002d8c <UART_SetConfig+0x140>
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d829      	bhi.n	8002d84 <UART_SetConfig+0x138>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <UART_SetConfig+0xec>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002d85 	.word	0x08002d85
 8002d40:	08002d85 	.word	0x08002d85
 8002d44:	08002d85 	.word	0x08002d85
 8002d48:	08002d79 	.word	0x08002d79
 8002d4c:	08002d85 	.word	0x08002d85
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002d85 	.word	0x08002d85
 8002d58:	08002d73 	.word	0x08002d73
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d85 	.word	0x08002d85
 8002d68:	08002d7f 	.word	0x08002d7f
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	76fb      	strb	r3, [r7, #27]
 8002d70:	e0ae      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d72:	2302      	movs	r3, #2
 8002d74:	76fb      	strb	r3, [r7, #27]
 8002d76:	e0ab      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	76fb      	strb	r3, [r7, #27]
 8002d7c:	e0a8      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	76fb      	strb	r3, [r7, #27]
 8002d82:	e0a5      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d84:	2310      	movs	r3, #16
 8002d86:	76fb      	strb	r3, [r7, #27]
 8002d88:	bf00      	nop
 8002d8a:	e0a1      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <UART_SetConfig+0x2f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d120      	bne.n	8002dd8 <UART_SetConfig+0x18c>
 8002d96:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d00f      	beq.n	8002dc4 <UART_SetConfig+0x178>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d802      	bhi.n	8002dae <UART_SetConfig+0x162>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <UART_SetConfig+0x16c>
 8002dac:	e010      	b.n	8002dd0 <UART_SetConfig+0x184>
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d005      	beq.n	8002dbe <UART_SetConfig+0x172>
 8002db2:	2b30      	cmp	r3, #48	; 0x30
 8002db4:	d009      	beq.n	8002dca <UART_SetConfig+0x17e>
 8002db6:	e00b      	b.n	8002dd0 <UART_SetConfig+0x184>
 8002db8:	2300      	movs	r3, #0
 8002dba:	76fb      	strb	r3, [r7, #27]
 8002dbc:	e088      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	76fb      	strb	r3, [r7, #27]
 8002dc2:	e085      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	76fb      	strb	r3, [r7, #27]
 8002dc8:	e082      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	76fb      	strb	r3, [r7, #27]
 8002dce:	e07f      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	76fb      	strb	r3, [r7, #27]
 8002dd4:	bf00      	nop
 8002dd6:	e07b      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a59      	ldr	r2, [pc, #356]	; (8002f44 <UART_SetConfig+0x2f8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d120      	bne.n	8002e24 <UART_SetConfig+0x1d8>
 8002de2:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d00f      	beq.n	8002e10 <UART_SetConfig+0x1c4>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d802      	bhi.n	8002dfa <UART_SetConfig+0x1ae>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <UART_SetConfig+0x1b8>
 8002df8:	e010      	b.n	8002e1c <UART_SetConfig+0x1d0>
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d005      	beq.n	8002e0a <UART_SetConfig+0x1be>
 8002dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8002e00:	d009      	beq.n	8002e16 <UART_SetConfig+0x1ca>
 8002e02:	e00b      	b.n	8002e1c <UART_SetConfig+0x1d0>
 8002e04:	2300      	movs	r3, #0
 8002e06:	76fb      	strb	r3, [r7, #27]
 8002e08:	e062      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	76fb      	strb	r3, [r7, #27]
 8002e0e:	e05f      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e10:	2304      	movs	r3, #4
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e05c      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e16:	2308      	movs	r3, #8
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e059      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	bf00      	nop
 8002e22:	e055      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <UART_SetConfig+0x2fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d124      	bne.n	8002e78 <UART_SetConfig+0x22c>
 8002e2e:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d012      	beq.n	8002e64 <UART_SetConfig+0x218>
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d802      	bhi.n	8002e4a <UART_SetConfig+0x1fe>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <UART_SetConfig+0x20c>
 8002e48:	e012      	b.n	8002e70 <UART_SetConfig+0x224>
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4e:	d006      	beq.n	8002e5e <UART_SetConfig+0x212>
 8002e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e54:	d009      	beq.n	8002e6a <UART_SetConfig+0x21e>
 8002e56:	e00b      	b.n	8002e70 <UART_SetConfig+0x224>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e038      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e035      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e032      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e02f      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	bf00      	nop
 8002e76:	e02b      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <UART_SetConfig+0x2e4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d124      	bne.n	8002ecc <UART_SetConfig+0x280>
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d012      	beq.n	8002eb8 <UART_SetConfig+0x26c>
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d802      	bhi.n	8002e9e <UART_SetConfig+0x252>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <UART_SetConfig+0x260>
 8002e9c:	e012      	b.n	8002ec4 <UART_SetConfig+0x278>
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea2:	d006      	beq.n	8002eb2 <UART_SetConfig+0x266>
 8002ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ea8:	d009      	beq.n	8002ebe <UART_SetConfig+0x272>
 8002eaa:	e00b      	b.n	8002ec4 <UART_SetConfig+0x278>
 8002eac:	2300      	movs	r3, #0
 8002eae:	76fb      	strb	r3, [r7, #27]
 8002eb0:	e00e      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	76fb      	strb	r3, [r7, #27]
 8002eb6:	e00b      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	e008      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	76fb      	strb	r3, [r7, #27]
 8002ec2:	e005      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	76fb      	strb	r3, [r7, #27]
 8002ec8:	bf00      	nop
 8002eca:	e001      	b.n	8002ed0 <UART_SetConfig+0x284>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <UART_SetConfig+0x2e4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 8087 	bne.w	8002fea <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002edc:	7efb      	ldrb	r3, [r7, #27]
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d836      	bhi.n	8002f50 <UART_SetConfig+0x304>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <UART_SetConfig+0x29c>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08002f15 	.word	0x08002f15
 8002ef4:	08002f51 	.word	0x08002f51
 8002ef8:	08002f1b 	.word	0x08002f1b
 8002efc:	08002f51 	.word	0x08002f51
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f23 	.word	0x08002f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7ff f914 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002f10:	6178      	str	r0, [r7, #20]
        break;
 8002f12:	e022      	b.n	8002f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <UART_SetConfig+0x300>)
 8002f16:	617b      	str	r3, [r7, #20]
        break;
 8002f18:	e01f      	b.n	8002f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1a:	f7ff f877 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002f1e:	6178      	str	r0, [r7, #20]
        break;
 8002f20:	e01b      	b.n	8002f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f26:	617b      	str	r3, [r7, #20]
        break;
 8002f28:	e017      	b.n	8002f5a <UART_SetConfig+0x30e>
 8002f2a:	bf00      	nop
 8002f2c:	efff69f3 	.word	0xefff69f3
 8002f30:	40008000 	.word	0x40008000
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40004400 	.word	0x40004400
 8002f40:	40004800 	.word	0x40004800
 8002f44:	40004c00 	.word	0x40004c00
 8002f48:	40005000 	.word	0x40005000
 8002f4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	76bb      	strb	r3, [r7, #26]
        break;
 8002f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80f1 	beq.w	8003144 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d305      	bcc.n	8002f7e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d902      	bls.n	8002f84 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	76bb      	strb	r3, [r7, #26]
 8002f82:	e0df      	b.n	8003144 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4619      	mov	r1, r3
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	f04f 0400 	mov.w	r4, #0
 8002f94:	0214      	lsls	r4, r2, #8
 8002f96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f9a:	020b      	lsls	r3, r1, #8
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6852      	ldr	r2, [r2, #4]
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	eb13 0b01 	adds.w	fp, r3, r1
 8002fac:	eb44 0c02 	adc.w	ip, r4, r2
 8002fb0:	4658      	mov	r0, fp
 8002fb2:	4661      	mov	r1, ip
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	f7fd f902 	bl	80001c8 <__aeabi_uldivmod>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd0:	d308      	bcc.n	8002fe4 <UART_SetConfig+0x398>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd8:	d204      	bcs.n	8002fe4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e0af      	b.n	8003144 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	76bb      	strb	r3, [r7, #26]
 8002fe8:	e0ac      	b.n	8003144 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff2:	d15b      	bne.n	80030ac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002ff4:	7efb      	ldrb	r3, [r7, #27]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d827      	bhi.n	800304a <UART_SetConfig+0x3fe>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0x3b4>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003025 	.word	0x08003025
 8003004:	0800302d 	.word	0x0800302d
 8003008:	08003035 	.word	0x08003035
 800300c:	0800304b 	.word	0x0800304b
 8003010:	0800303b 	.word	0x0800303b
 8003014:	0800304b 	.word	0x0800304b
 8003018:	0800304b 	.word	0x0800304b
 800301c:	0800304b 	.word	0x0800304b
 8003020:	08003043 	.word	0x08003043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7ff f888 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8003028:	6178      	str	r0, [r7, #20]
        break;
 800302a:	e013      	b.n	8003054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800302c:	f7ff f89a 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003030:	6178      	str	r0, [r7, #20]
        break;
 8003032:	e00f      	b.n	8003054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003034:	4b49      	ldr	r3, [pc, #292]	; (800315c <UART_SetConfig+0x510>)
 8003036:	617b      	str	r3, [r7, #20]
        break;
 8003038:	e00c      	b.n	8003054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7fe ffe7 	bl	800200c <HAL_RCC_GetSysClockFreq>
 800303e:	6178      	str	r0, [r7, #20]
        break;
 8003040:	e008      	b.n	8003054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003046:	617b      	str	r3, [r7, #20]
        break;
 8003048:	e004      	b.n	8003054 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	76bb      	strb	r3, [r7, #26]
        break;
 8003052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d074      	beq.n	8003144 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005a      	lsls	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	441a      	add	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d916      	bls.n	80030a6 <UART_SetConfig+0x45a>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d212      	bcs.n	80030a6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b29a      	uxth	r2, r3
 8003096:	89fb      	ldrh	r3, [r7, #14]
 8003098:	4313      	orrs	r3, r2
 800309a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	89fa      	ldrh	r2, [r7, #14]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e04e      	b.n	8003144 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	76bb      	strb	r3, [r7, #26]
 80030aa:	e04b      	b.n	8003144 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ac:	7efb      	ldrb	r3, [r7, #27]
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d827      	bhi.n	8003102 <UART_SetConfig+0x4b6>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x46c>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030ed 	.word	0x080030ed
 80030c4:	08003103 	.word	0x08003103
 80030c8:	080030f3 	.word	0x080030f3
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003103 	.word	0x08003103
 80030d4:	08003103 	.word	0x08003103
 80030d8:	080030fb 	.word	0x080030fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7ff f82c 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 80030e0:	6178      	str	r0, [r7, #20]
        break;
 80030e2:	e013      	b.n	800310c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e4:	f7ff f83e 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 80030e8:	6178      	str	r0, [r7, #20]
        break;
 80030ea:	e00f      	b.n	800310c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <UART_SetConfig+0x510>)
 80030ee:	617b      	str	r3, [r7, #20]
        break;
 80030f0:	e00c      	b.n	800310c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f2:	f7fe ff8b 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80030f6:	6178      	str	r0, [r7, #20]
        break;
 80030f8:	e008      	b.n	800310c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	617b      	str	r3, [r7, #20]
        break;
 8003100:	e004      	b.n	800310c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	76bb      	strb	r3, [r7, #26]
        break;
 800310a:	bf00      	nop
    }

    if (pclk != 0U)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085a      	lsrs	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	441a      	add	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	b29b      	uxth	r3, r3
 8003126:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d908      	bls.n	8003140 <UART_SetConfig+0x4f4>
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d204      	bcs.n	8003140 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e001      	b.n	8003144 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003150:	7ebb      	ldrb	r3, [r7, #26]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800315c:	00f42400 	.word	0x00f42400

08003160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01a      	beq.n	8003276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325e:	d10a      	bne.n	8003276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032b2:	f7fd fe93 	bl	8000fdc <HAL_GetTick>
 80032b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d10e      	bne.n	80032e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f82a 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e020      	b.n	8003326 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d10e      	bne.n	8003310 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f814 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e00a      	b.n	8003326 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333e:	e05d      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d059      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003348:	f7fd fe48 	bl	8000fdc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <UART_WaitOnFlagUntilTimeout+0x30>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11b      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800336c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e042      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02b      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d123      	bne.n	80033fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d092      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4e0d      	ldr	r6, [pc, #52]	; (800345c <__libc_init_array+0x38>)
 8003428:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342a:	1ba4      	subs	r4, r4, r6
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	2500      	movs	r5, #0
 8003430:	42a5      	cmp	r5, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	4e0b      	ldr	r6, [pc, #44]	; (8003464 <__libc_init_array+0x40>)
 8003436:	4c0c      	ldr	r4, [pc, #48]	; (8003468 <__libc_init_array+0x44>)
 8003438:	f000 f820 	bl	800347c <_init>
 800343c:	1ba4      	subs	r4, r4, r6
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	2500      	movs	r5, #0
 8003442:	42a5      	cmp	r5, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800344c:	4798      	blx	r3
 800344e:	3501      	adds	r5, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003456:	4798      	blx	r3
 8003458:	3501      	adds	r5, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	080034e4 	.word	0x080034e4
 8003460:	080034e4 	.word	0x080034e4
 8003464:	080034e4 	.word	0x080034e4
 8003468:	080034e8 	.word	0x080034e8

0800346c <memset>:
 800346c:	4402      	add	r2, r0
 800346e:	4603      	mov	r3, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
