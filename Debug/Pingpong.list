
Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034a0  080034a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080034b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080034b4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a351  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a49  00000000  00000000  0002a38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258bf  00000000  00000000  0002cef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ffe  00000000  00000000  000527af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e51eb  00000000  00000000  0005b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  00140a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003438 	.word	0x08003438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003438 	.word	0x08003438

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @param None
  * @return None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0b8      	sub	sp, #224	; 0xe0
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 ffa6 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2288      	movs	r2, #136	; 0x88
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ff98 	bl	8003428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000524:	2307      	movs	r3, #7
 8000526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f87c 	bl	8001638 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f8f0 	bl	800072a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fc48 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057a:	f000 f8d6 	bl	800072a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057e:	2302      	movs	r3, #2
 8000580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fe3f 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000594:	f000 f8c9 	bl	800072a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059c:	f000 fff6 	bl	800158c <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005a6:	f000 f8c0 	bl	800072a <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	37e0      	adds	r7, #224	; 0xe0
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a4c      	ldr	r2, [pc, #304]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a46      	ldr	r2, [pc, #280]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <MX_GPIO_Init+0x14c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a40      	ldr	r2, [pc, #256]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_GPIO_Init+0x14c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f000 ff84 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2160      	movs	r1, #96	; 0x60
 800063c:	4831      	ldr	r0, [pc, #196]	; (8000704 <MX_GPIO_Init+0x150>)
 800063e:	f000 ff7f 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f641 0106 	movw	r1, #6150	; 0x1806
 8000648:	482f      	ldr	r0, [pc, #188]	; (8000708 <MX_GPIO_Init+0x154>)
 800064a:	f000 ff79 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x158>)
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4828      	ldr	r0, [pc, #160]	; (8000704 <MX_GPIO_Init+0x150>)
 8000664:	f000 fdac 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 8000668:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fd9c 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <MX_GPIO_Init+0x150>)
 80006a0:	f000 fd8e 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80006a4:	f641 0306 	movw	r3, #6150	; 0x1806
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_GPIO_Init+0x154>)
 80006be:	f000 fd7f 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80006c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0x154>)
 80006d8:	f000 fd72 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x150>)
 80006f2:	f000 fd65 	bl	80011c0 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800
 8000708:	48000400 	.word	0x48000400
 800070c:	10210000 	.word	0x10210000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fbd0 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f7ff fed6 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff4a 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fb2e 	bl	8000d80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
#else
  Pingpong();
 8000724:	f000 f808 	bl	8000738 <Pingpong>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x18>

0800072a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @return None
  */
void Error_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <Pingpong>:
/**
@brief Pingpong, game logic and game states of Pingpong
@param void
@return void, no return value
**/
void Pingpong(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	uint8_t L_points; // Left players points
	uint8_t R_points; // Right players points

	//uint8_t NextServe; // Determines who should serve

	State = Start; // Initiate State to Start
 800073e:	4b9a      	ldr	r3, [pc, #616]	; (80009a8 <Pingpong+0x270>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	NextState = Start;
 8000744:	4b99      	ldr	r3, [pc, #612]	; (80009ac <Pingpong+0x274>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]

	Speed = 500000; // Number of loops
 800074a:	4b99      	ldr	r3, [pc, #612]	; (80009b0 <Pingpong+0x278>)
 800074c:	603b      	str	r3, [r7, #0]

	/* Infinite loop */
	while(1) {

		State = NextState;
 800074e:	4b97      	ldr	r3, [pc, #604]	; (80009ac <Pingpong+0x274>)
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	4b95      	ldr	r3, [pc, #596]	; (80009a8 <Pingpong+0x270>)
 8000754:	701a      	strb	r2, [r3, #0]

		switch (State) { // State machine
 8000756:	4b94      	ldr	r3, [pc, #592]	; (80009a8 <Pingpong+0x270>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b04      	cmp	r3, #4
 800075c:	f200 8121 	bhi.w	80009a2 <Pingpong+0x26a>
 8000760:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <Pingpong+0x30>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	0800077d 	.word	0x0800077d
 800076c:	080007e7 	.word	0x080007e7
 8000770:	08000867 	.word	0x08000867
 8000774:	0800094d 	.word	0x0800094d
 8000778:	080008e7 	.word	0x080008e7

		case Start: {
			Led_on(0); // Turn off all LEDs
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f919 	bl	80009b4 <Led_on>
			L_points = 0; // Set points to 0
 8000782:	2300      	movs	r3, #0
 8000784:	71bb      	strb	r3, [r7, #6]
			R_points = 0; // Set points to 0
 8000786:	2300      	movs	r3, #0
 8000788:	717b      	strb	r3, [r7, #5]
			Serve_L = true; // R player turn
 800078a:	2301      	movs	r3, #1
 800078c:	73bb      	strb	r3, [r7, #14]
			ButtonPressed = false;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]

			if(L_hit() == true) { // L serve
 8000792:	f000 fa49 	bl	8000c28 <L_hit>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00d      	beq.n	80007b8 <Pingpong+0x80>
				Led = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	71fb      	strb	r3, [r7, #7]
				Serve_L = false; // If left serve, left can't serve next time
 80007a0:	2300      	movs	r3, #0
 80007a2:	73bb      	strb	r3, [r7, #14]
				//NextServe = 0;
				NextState = MoveRight;
 80007a4:	4b81      	ldr	r3, [pc, #516]	; (80009ac <Pingpong+0x274>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
				while (L_hit() == true); // wait until button is released
 80007aa:	bf00      	nop
 80007ac:	f000 fa3c 	bl	8000c28 <L_hit>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1fa      	bne.n	80007ac <Pingpong+0x74>
				while (R_hit() == true); // wait until button is released
			}
			else
				NextState = Start; // Stay in Start state
		}
		break;
 80007b6:	e0f5      	b.n	80009a4 <Pingpong+0x26c>
			else if (R_hit() == true) { // R serve
 80007b8:	f000 fa48 	bl	8000c4c <R_hit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00d      	beq.n	80007de <Pingpong+0xa6>
				Led = 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	71fb      	strb	r3, [r7, #7]
				Serve_L = true;		// Left player's turn next time
 80007c6:	2301      	movs	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
				NextState = MoveLeft;
 80007ca:	4b78      	ldr	r3, [pc, #480]	; (80009ac <Pingpong+0x274>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	701a      	strb	r2, [r3, #0]
				while (R_hit() == true); // wait until button is released
 80007d0:	bf00      	nop
 80007d2:	f000 fa3b 	bl	8000c4c <R_hit>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1fa      	bne.n	80007d2 <Pingpong+0x9a>
		break;
 80007dc:	e0e2      	b.n	80009a4 <Pingpong+0x26c>
				NextState = Start; // Stay in Start state
 80007de:	4b73      	ldr	r3, [pc, #460]	; (80009ac <Pingpong+0x274>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
		break;
 80007e4:	e0de      	b.n	80009a4 <Pingpong+0x26c>

		case MoveRight: {
			Led_on(Led);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f8e3 	bl	80009b4 <Led_on>
			Varv = Speed;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	60bb      	str	r3, [r7, #8]

			while(Varv != 0) {
 80007f2:	e009      	b.n	8000808 <Pingpong+0xd0>
				if(R_hit()) ButtonPressed = true; // R hit
 80007f4:	f000 fa2a 	bl	8000c4c <R_hit>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <Pingpong+0xca>
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
				Varv --;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	3b01      	subs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
			while(Varv != 0) {
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f2      	bne.n	80007f4 <Pingpong+0xbc>
			}

			if(ButtonPressed) { // R pressed
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00f      	beq.n	8000834 <Pingpong+0xfc>
				if(Led == 8) { // and LED8 activated
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b08      	cmp	r3, #8
 8000818:	d105      	bne.n	8000826 <Pingpong+0xee>
					NextState = MoveLeft; // return ball
 800081a:	4b64      	ldr	r3, [pc, #400]	; (80009ac <Pingpong+0x274>)
 800081c:	2202      	movs	r2, #2
 800081e:	701a      	strb	r2, [r3, #0]
					Led = 7;
 8000820:	2307      	movs	r3, #7
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	e013      	b.n	800084e <Pingpong+0x116>
				}
				else {
					L_points++;
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	3301      	adds	r3, #1
 800082a:	71bb      	strb	r3, [r7, #6]
					NextState = ShowPoints; // hit too early
 800082c:	4b5f      	ldr	r3, [pc, #380]	; (80009ac <Pingpong+0x274>)
 800082e:	2204      	movs	r2, #4
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e00c      	b.n	800084e <Pingpong+0x116>
				}
			}
			else {
				if(Led == 9) { // no hit or too late
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b09      	cmp	r3, #9
 8000838:	d106      	bne.n	8000848 <Pingpong+0x110>
					L_points++;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	3301      	adds	r3, #1
 800083e:	71bb      	strb	r3, [r7, #6]
					NextState = ShowPoints;
 8000840:	4b5a      	ldr	r3, [pc, #360]	; (80009ac <Pingpong+0x274>)
 8000842:	2204      	movs	r2, #4
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e002      	b.n	800084e <Pingpong+0x116>
				}

				else
					NextState = MoveRight; // ball continues to move right
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <Pingpong+0x274>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
			}
			if(!ButtonPressed) Led++; // prepare to turn next LED on
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <Pingpong+0x128>
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
			ButtonPressed = false;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000864:	e09e      	b.n	80009a4 <Pingpong+0x26c>

		case MoveLeft: {
			Led_on(Led);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f8a3 	bl	80009b4 <Led_on>
			Varv = Speed;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	60bb      	str	r3, [r7, #8]

			while(Varv != 0) {
 8000872:	e009      	b.n	8000888 <Pingpong+0x150>
				if(L_hit()) ButtonPressed = true; // L hit
 8000874:	f000 f9d8 	bl	8000c28 <L_hit>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <Pingpong+0x14a>
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
				Varv--;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3b01      	subs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
			while(Varv != 0) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f2      	bne.n	8000874 <Pingpong+0x13c>
			}

			if(ButtonPressed) { // L pressed
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00f      	beq.n	80008b4 <Pingpong+0x17c>
				if(Led == 1) { // and LED1 active
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d105      	bne.n	80008a6 <Pingpong+0x16e>
					NextState = MoveRight; // return ball
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <Pingpong+0x274>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
					Led = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	e013      	b.n	80008ce <Pingpong+0x196>
				}

				else {
					R_points++;
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	3301      	adds	r3, #1
 80008aa:	717b      	strb	r3, [r7, #5]
					NextState = ShowPoints; // hit too early
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <Pingpong+0x274>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e00c      	b.n	80008ce <Pingpong+0x196>
				}
			}

			else {
				if(Led == 0) { // no hit or too late
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d106      	bne.n	80008c8 <Pingpong+0x190>
					R_points++;
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	3301      	adds	r3, #1
 80008be:	717b      	strb	r3, [r7, #5]
					NextState = ShowPoints;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <Pingpong+0x274>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e002      	b.n	80008ce <Pingpong+0x196>
				}

				else
					NextState = MoveLeft; // ball continues to move left
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <Pingpong+0x274>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	701a      	strb	r2, [r3, #0]
			}

			if(!ButtonPressed) Led--; // prepare to turn next LED on
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f083 0301 	eor.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <Pingpong+0x1a8>
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b01      	subs	r3, #1
 80008de:	71fb      	strb	r3, [r7, #7]
			ButtonPressed = false;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80008e4:	e05e      	b.n	80009a4 <Pingpong+0x26c>

		case ShowPoints: {
			Show_points(4, 4);
 80008e6:	2104      	movs	r1, #4
 80008e8:	2004      	movs	r0, #4
 80008ea:	f000 f973 	bl	8000bd4 <Show_points>
			HAL_Delay(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f000 fb5d 	bl	8000fb0 <HAL_Delay>
			Led_on(0); // turn off leds
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f85c 	bl	80009b4 <Led_on>

			if(L_points == 4 || R_points == 4 ) { // Show winner and reset game to start
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d002      	beq.n	8000908 <Pingpong+0x1d0>
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d110      	bne.n	800092a <Pingpong+0x1f2>
				Show_points(L_points, R_points);
 8000908:	797a      	ldrb	r2, [r7, #5]
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f960 	bl	8000bd4 <Show_points>
				HAL_Delay(5000);	// 5000 ms (5 s)
 8000914:	f241 3088 	movw	r0, #5000	; 0x1388
 8000918:	f000 fb4a 	bl	8000fb0 <HAL_Delay>
				Led_on(0); // turn off leds
 800091c:	2000      	movs	r0, #0
 800091e:	f000 f849 	bl	80009b4 <Led_on>
				NextState = Start;
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <Pingpong+0x274>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);	// 2000 ms (2 s)
				Led_on(0); // turn off leds
				NextState = Serve;
			}
		}
		break;
 8000928:	e03c      	b.n	80009a4 <Pingpong+0x26c>
				Show_points(L_points, R_points);
 800092a:	797a      	ldrb	r2, [r7, #5]
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f94f 	bl	8000bd4 <Show_points>
				HAL_Delay(3000);	// 2000 ms (2 s)
 8000936:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800093a:	f000 fb39 	bl	8000fb0 <HAL_Delay>
				Led_on(0); // turn off leds
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f838 	bl	80009b4 <Led_on>
				NextState = Serve;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <Pingpong+0x274>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
		break;
 800094a:	e02b      	b.n	80009a4 <Pingpong+0x26c>

		case Serve: {
			//NextServe++;
			if (Serve_L == true) { // left player serves
 800094c:	7bbb      	ldrb	r3, [r7, #14]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d013      	beq.n	800097a <Pingpong+0x242>
				Serve_L = false;
 8000952:	2300      	movs	r3, #0
 8000954:	73bb      	strb	r3, [r7, #14]
				Led_on(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f000 f82c 	bl	80009b4 <Led_on>
				Led = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	71fb      	strb	r3, [r7, #7]
				NextState = MoveRight;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <Pingpong+0x274>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
				while (L_hit() != true); // wait until button is pressed
 8000966:	bf00      	nop
 8000968:	f000 f95e 	bl	8000c28 <L_hit>
 800096c:	4603      	mov	r3, r0
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f7      	bne.n	8000968 <Pingpong+0x230>
				Led = 8;
				NextState = MoveLeft;
				while (R_hit() != true); // wait until button is pressed
			}
		}
		break;
 8000978:	e014      	b.n	80009a4 <Pingpong+0x26c>
				Serve_L = true;
 800097a:	2301      	movs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
				Led_on(8);
 800097e:	2008      	movs	r0, #8
 8000980:	f000 f818 	bl	80009b4 <Led_on>
				Led = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	71fb      	strb	r3, [r7, #7]
				NextState = MoveLeft;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <Pingpong+0x274>)
 800098a:	2202      	movs	r2, #2
 800098c:	701a      	strb	r2, [r3, #0]
				while (R_hit() != true); // wait until button is pressed
 800098e:	bf00      	nop
 8000990:	f000 f95c 	bl	8000c4c <R_hit>
 8000994:	4603      	mov	r3, r0
 8000996:	f083 0301 	eor.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1f7      	bne.n	8000990 <Pingpong+0x258>
		break;
 80009a0:	e000      	b.n	80009a4 <Pingpong+0x26c>

		default:
			break;
 80009a2:	bf00      	nop
		State = NextState;
 80009a4:	e6d3      	b.n	800074e <Pingpong+0x16>
 80009a6:	bf00      	nop
 80009a8:	20000028 	.word	0x20000028
 80009ac:	20000029 	.word	0x20000029
 80009b0:	0007a120 	.word	0x0007a120

080009b4 <Led_on>:
@brief Led_on, turn one of the pingpong leds on
@param uint8_t Lednr , number to the Led that is turned on
 Lednr can be 1-8, all other values turns all leds off
@return void
*/
void Led_on(uint8_t Lednr) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i = 1; i <= 8; i++) {
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e0a6      	b.n	8000b12 <Led_on+0x15e>
		switch(i) {
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	f200 809f 	bhi.w	8000b0c <Led_on+0x158>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Led_on+0x20>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	08000a15 	.word	0x08000a15
 80009dc:	08000a35 	.word	0x08000a35
 80009e0:	08000a59 	.word	0x08000a59
 80009e4:	08000a7d 	.word	0x08000a7d
 80009e8:	08000aa5 	.word	0x08000aa5
 80009ec:	08000acd 	.word	0x08000acd
 80009f0:	08000aed 	.word	0x08000aed
		case 1: // Led 1
			if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d105      	bne.n	8000a08 <Led_on+0x54>
 80009fc:	2201      	movs	r2, #1
 80009fe:	2102      	movs	r1, #2
 8000a00:	4848      	ldr	r0, [pc, #288]	; (8000b24 <Led_on+0x170>)
 8000a02:	f000 fd9d 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			break;
 8000a06:	e081      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4845      	ldr	r0, [pc, #276]	; (8000b24 <Led_on+0x170>)
 8000a0e:	f000 fd97 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000a12:	e07b      	b.n	8000b0c <Led_on+0x158>
		case 2: // Led 2
			if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d105      	bne.n	8000a28 <Led_on+0x74>
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4840      	ldr	r0, [pc, #256]	; (8000b24 <Led_on+0x170>)
 8000a22:	f000 fd8d 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
			break;
 8000a26:	e071      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	483d      	ldr	r0, [pc, #244]	; (8000b24 <Led_on+0x170>)
 8000a2e:	f000 fd87 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000a32:	e06b      	b.n	8000b0c <Led_on+0x158>
		case 3: // Led 3
			if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d106      	bne.n	8000a4a <Led_on+0x96>
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	4838      	ldr	r0, [pc, #224]	; (8000b24 <Led_on+0x170>)
 8000a44:	f000 fd7c 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
 8000a48:	e060      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a50:	4834      	ldr	r0, [pc, #208]	; (8000b24 <Led_on+0x170>)
 8000a52:	f000 fd75 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000a56:	e059      	b.n	8000b0c <Led_on+0x158>
		case 4: // Led 4
			if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d106      	bne.n	8000a6e <Led_on+0xba>
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	482f      	ldr	r0, [pc, #188]	; (8000b24 <Led_on+0x170>)
 8000a68:	f000 fd6a 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
			break;
 8000a6c:	e04e      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	482b      	ldr	r0, [pc, #172]	; (8000b24 <Led_on+0x170>)
 8000a76:	f000 fd63 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000a7a:	e047      	b.n	8000b0c <Led_on+0x158>
		case 5: // Led 5
			if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d107      	bne.n	8000a94 <Led_on+0xe0>
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fd57 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
			break;
 8000a92:	e03b      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fd4f 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000aa2:	e033      	b.n	8000b0c <Led_on+0x158>
		case 6: // Led 6
			if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d107      	bne.n	8000abc <Led_on+0x108>
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fd43 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
			break;
 8000aba:	e027      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fd3b 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000aca:	e01f      	b.n	8000b0c <Led_on+0x158>
		case 7: // Led 7
			if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d105      	bne.n	8000ae0 <Led_on+0x12c>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <Led_on+0x174>)
 8000ada:	f000 fd31 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
			break;
 8000ade:	e015      	b.n	8000b0c <Led_on+0x158>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <Led_on+0x174>)
 8000ae6:	f000 fd2b 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000aea:	e00f      	b.n	8000b0c <Led_on+0x158>
		case 8: // Led 8
			if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000aec:	79fa      	ldrb	r2, [r7, #7]
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d105      	bne.n	8000b00 <Led_on+0x14c>
 8000af4:	2201      	movs	r2, #1
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <Led_on+0x174>)
 8000afa:	f000 fd21 	bl	8001540 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
			break;
 8000afe:	e004      	b.n	8000b0a <Led_on+0x156>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <Led_on+0x174>)
 8000b06:	f000 fd1b 	bl	8001540 <HAL_GPIO_WritePin>
			break;
 8000b0a:	bf00      	nop
	for(i = 1; i <= 8; i++) {
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	f67f af55 	bls.w	80009c4 <Led_on+0x10>
		default:
			;
		} // end of switch
	} // end for-loop
	return;
 8000b1a:	bf00      	nop
} // End of functions Led_on
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000800 	.word	0x48000800

08000b2c <setLed>:

void setLed(uint8_t led) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
		if (led==1) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d104      	bne.n	8000b46 <setLed+0x1a>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4822      	ldr	r0, [pc, #136]	; (8000bcc <setLed+0xa0>)
 8000b42:	f000 fcfd 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==2) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d104      	bne.n	8000b56 <setLed+0x2a>
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	481e      	ldr	r0, [pc, #120]	; (8000bcc <setLed+0xa0>)
 8000b52:	f000 fcf5 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==3) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d105      	bne.n	8000b68 <setLed+0x3c>
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <setLed+0xa0>)
 8000b64:	f000 fcec 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==4) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d105      	bne.n	8000b7a <setLed+0x4e>
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <setLed+0xa0>)
 8000b76:	f000 fce3 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==5) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d106      	bne.n	8000b8e <setLed+0x62>
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 fcd9 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==6) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d106      	bne.n	8000ba2 <setLed+0x76>
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fccf 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==7) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d104      	bne.n	8000bb2 <setLed+0x86>
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2120      	movs	r1, #32
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <setLed+0xa4>)
 8000bae:	f000 fcc7 	bl	8001540 <HAL_GPIO_WritePin>
		if (led==8) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d105      	bne.n	8000bc4 <setLed+0x98>
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <setLed+0xa4>)
 8000bbe:	f000 fcbf 	bl	8001540 <HAL_GPIO_WritePin>
		return;
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
}
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <Show_points>:
@param1 uint8_t L_points points for left player
@param2 uint8_t R_points points for right player
@return void, no return value
 */

void Show_points(uint8_t L_points, uint8_t R_points) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 1; i <= L_points; i++) {
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e006      	b.n	8000bf8 <Show_points+0x24>
		setLed(i);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff9d 	bl	8000b2c <setLed>
	for (uint8_t i = 1; i <= L_points; i++) {
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d9f4      	bls.n	8000bea <Show_points+0x16>
	}
	for(uint8_t j = 8; j > 8-R_points; j--) {
 8000c00:	2308      	movs	r3, #8
 8000c02:	73bb      	strb	r3, [r7, #14]
 8000c04:	e006      	b.n	8000c14 <Show_points+0x40>
		setLed(j);
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff8f 	bl	8000b2c <setLed>
	for(uint8_t j = 8; j > 8-R_points; j--) {
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	73bb      	strb	r3, [r7, #14]
 8000c14:	7bba      	ldrb	r2, [r7, #14]
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	f1c3 0308 	rsb	r3, r3, #8
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dcf2      	bgt.n	8000c06 <Show_points+0x32>
	}
	return;
 8000c20:	bf00      	nop
}
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <L_hit>:
/**
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
*/
bool L_hit(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(L_button_GPIO_Port, L_button_Pin) == 0) return true;
 8000c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <L_hit+0x20>)
 8000c32:	f000 fc6d 	bl	8001510 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <L_hit+0x18>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <L_hit+0x1a>
	else return false;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48000400 	.word	0x48000400

08000c4c <R_hit>:
/**
@brief R_hit, check if R button is pressed
@param void
@return bool, true if R button pushed, false otherwise
*/
bool R_hit(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(R_button_GPIO_Port, R_button_Pin) == 0) return true;
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <R_hit+0x20>)
 8000c56:	f000 fc5b 	bl	8001510 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <R_hit+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <R_hit+0x1a>
	else return false;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48000800 	.word	0x48000800

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f930 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <SystemInit+0x64>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <SystemInit+0x64>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <SystemInit+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <SystemInit+0x68>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <SystemInit+0x68>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <SystemInit+0x68>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <SystemInit+0x68>)
 8000d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <SystemInit+0x68>)
 8000d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SystemInit+0x68>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <SystemInit+0x68>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <SystemInit+0x68>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SystemInit+0x64>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_USART2_UART_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x58>)
 8000dc4:	f001 fed2 	bl	8002b6c <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dce:	f7ff fcac 	bl	800072a <Error_Handler>
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c
 8000ddc:	40004400 	.word	0x40004400

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_UART_MspInit+0x7c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d128      	bne.n	8000e54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_UART_MspInit+0x80>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e32:	230c      	movs	r3, #12
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e42:	2307      	movs	r3, #7
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 f9b6 	bl	80011c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff ff54 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e6e:	e003      	b.n	8000e78 <LoopCopyDataInit>

08000e70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e76:	3104      	adds	r1, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e80:	d3f6      	bcc.n	8000e70 <CopyDataInit>
	ldr	r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e84:	e002      	b.n	8000e8c <LoopFillZerobss>

08000e86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e88:	f842 3b04 	str.w	r3, [r2], #4

08000e8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e90:	d3f9      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f002 faa5 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fc3b 	bl	8000710 <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ea0:	080034a8 	.word	0x080034a8
	ldr	r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ea8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000eb0:	200000b0 	.word	0x200000b0

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_Init+0x3c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x3c>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 f942 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f80f 	bl	8000ef8 <HAL_InitTick>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	e001      	b.n	8000eea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee6:	f7ff fec3 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d023      	beq.n	8000f54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_InitTick+0x70>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93f 	bl	80011a6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10f      	bne.n	8000f4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d809      	bhi.n	8000f48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f917 	bl	800116e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_InitTick+0x74>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e004      	b.n	8000f58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e001      	b.n	8000f58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	200000ac 	.word	0x200000ac

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200000ac 	.word	0x200000ac

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_Delay+0x40>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff47 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff5c 	bl	800103c <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffb0 	bl	8001114 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e17f      	b.n	80014d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8171 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00b      	beq.n	8001208 <HAL_GPIO_Init+0x48>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	2b11      	cmp	r3, #17
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 0201 	and.w	r2, r3, #1
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b03      	cmp	r3, #3
 8001274:	d118      	bne.n	80012a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x128>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ac 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <HAL_GPIO_Init+0x32c>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a5d      	ldr	r2, [pc, #372]	; (80014ec <HAL_GPIO_Init+0x32c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_GPIO_Init+0x32c>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138a:	4a59      	ldr	r2, [pc, #356]	; (80014f0 <HAL_GPIO_Init+0x330>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x242>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x334>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x338>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x33c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x340>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x344>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x348>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x22a>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x244>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001414:	4936      	ldr	r1, [pc, #216]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_GPIO_Init+0x34c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_GPIO_Init+0x34c>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x34c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001470:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_GPIO_Init+0x34c>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x34c>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_GPIO_Init+0x34c>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_GPIO_Init+0x34c>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_GPIO_Init+0x34c>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae78 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 80014e0:	bf00      	nop
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	48001400 	.word	0x48001400
 8001508:	48001800 	.word	0x48001800
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155c:	e002      	b.n	8001564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_PWREx_GetVoltageRange+0x18>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40007000 	.word	0x40007000

0800158c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159a:	d130      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a8:	d038      	beq.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d0:	e002      	b.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e4:	d102      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f2      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	d110      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e00f      	b.n	800161e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160a:	d007      	beq.n	800161c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3d4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4ba1      	ldr	r3, [pc, #644]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80e4 	beq.w	8001834 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_RCC_OscConfig+0x4a>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	f040 808b 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8087 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001682:	4b93      	ldr	r3, [pc, #588]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x62>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e3ac      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_RCC_OscConfig+0x7c>
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b2:	e005      	b.n	80016c0 <HAL_RCC_OscConfig+0x88>
 80016b4:	4b86      	ldr	r3, [pc, #536]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d223      	bcs.n	800170c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd3f 	bl	800214c <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e38d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b7d      	ldr	r3, [pc, #500]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4977      	ldr	r1, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4972      	ldr	r1, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e025      	b.n	8001758 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	496a      	ldr	r1, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4965      	ldr	r1, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fcff 	bl	800214c <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e34d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001758:	f000 fc36 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 800175c:	4601      	mov	r1, r0
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x29c>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	fa21 f303 	lsr.w	r3, r1, r3
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_OscConfig+0x2a0>)
 8001776:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x2a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fbbb 	bl	8000ef8 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d052      	beq.n	8001832 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	e331      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d032      	beq.n	80017fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fbf8 	bl	8000f98 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ac:	f7ff fbf4 	bl	8000f98 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e31a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	493b      	ldr	r1, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4936      	ldr	r1, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e01a      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800180a:	f7ff fbc5 	bl	8000f98 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001812:	f7ff fbc1 	bl	8000f98 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2e7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x1da>
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001832:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d074      	beq.n	800192a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x21a>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d10e      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d064      	beq.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d160      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e2c4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x24a>
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e01d      	b.n	80018be <HAL_RCC_OscConfig+0x286>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x26e>
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x286>
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01c      	beq.n	8001900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb67 	bl	8000f98 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018cc:	e011      	b.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08003450 	.word	0x08003450
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fb5a 	bl	8000f98 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e280      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	4baf      	ldr	r3, [pc, #700]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2a8>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fb4a 	bl	8000f98 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fb46 	bl	8000f98 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e26c      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	4ba5      	ldr	r3, [pc, #660]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d0>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d060      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x310>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d119      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	4b99      	ldr	r3, [pc, #612]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x328>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e249      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	4990      	ldr	r1, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001974:	e040      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d023      	beq.n	80019c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197e:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a8b      	ldr	r2, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fb05 	bl	8000f98 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fb01 	bl	8000f98 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e227      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	497c      	ldr	r1, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b7a      	ldr	r3, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fae1 	bl	8000f98 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff fadd 	bl	8000f98 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e203      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fabc 	bl	8000f98 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fab8 	bl	8000f98 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1de      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a36:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa9f 	bl	8000f98 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa9b 	bl	8000f98 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1c1      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a6 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d118      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fa62 	bl	8000f98 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad8:	f7ff fa5e 	bl	8000f98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e184      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4d8>
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_OscConfig+0x522>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d110      	bne.n	8001b3a <HAL_RCC_OscConfig+0x502>
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b38:	e00f      	b.n	8001b5a <HAL_RCC_OscConfig+0x522>
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa19 	bl	8000f98 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fa15 	bl	8000f98 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e139      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ed      	beq.n	8001b6a <HAL_RCC_OscConfig+0x532>
 8001b8e:	e01a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa02 	bl	8000f98 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b96:	e00f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f9fe 	bl	8000f98 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d906      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e122      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb8:	4b90      	ldr	r3, [pc, #576]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e8      	bne.n	8001b98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8108 	beq.w	8001df2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	f040 80d0 	bne.w	8001d8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bec:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d130      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d127      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d11f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c2c:	2a07      	cmp	r2, #7
 8001c2e:	bf14      	ite	ne
 8001c30:	2201      	movne	r2, #1
 8001c32:	2200      	moveq	r2, #0
 8001c34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d06e      	beq.n	8001d40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d069      	beq.n	8001d3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5c      	ldr	r2, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c90:	f7ff f982 	bl	8000f98 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f97e 	bl	8000f98 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0a4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x7c8>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc6:	3a01      	subs	r2, #1
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cd0:	0212      	lsls	r2, r2, #8
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd8:	0852      	lsrs	r2, r2, #1
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0552      	lsls	r2, r2, #21
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	0652      	lsls	r2, r2, #25
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cf0:	0912      	lsrs	r2, r2, #4
 8001cf2:	0452      	lsls	r2, r2, #17
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	4941      	ldr	r1, [pc, #260]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d14:	f7ff f940 	bl	8000f98 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f93c 	bl	8000f98 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e062      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3a:	e05a      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e059      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d152      	bne.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d64:	f7ff f918 	bl	8000f98 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f914 	bl	8000f98 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e03a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x734>
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d02d      	beq.n	8001dee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001db0:	f023 0303 	bic.w	r3, r3, #3
 8001db4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001dbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f8e7 	bl	8000f98 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff f8e3 	bl	8000f98 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x796>
 8001dec:	e001      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f99d808c 	.word	0xf99d808c

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0c8      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4961      	ldr	r1, [pc, #388]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b0      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d04c      	beq.n	8001eee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d121      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e09e      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e092      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e086      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e07e      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	493f      	ldr	r1, [pc, #252]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ebe:	f7ff f86b 	bl	8000f98 <HAL_GetTick>
 8001ec2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7ff f867 	bl	8000f98 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e066      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 020c 	and.w	r2, r3, #12
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d1eb      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4924      	ldr	r1, [pc, #144]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e036      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7a:	f000 f825 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4601      	mov	r1, r0
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	fa21 f303 	lsr.w	r3, r1, r3
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ffaa 	bl	8000ef8 <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08003450 	.word	0x08003450
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x34>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d11e      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10d      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d102      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e004      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800204e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d133      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xa4>
 8002066:	2b03      	cmp	r3, #3
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0xaa>
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e005      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	617b      	str	r3, [r7, #20]
      break;
 800207c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	3301      	adds	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	fb02 f203 	mul.w	r2, r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_GetSysClockFreq+0x104>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0e5b      	lsrs	r3, r3, #25
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020be:	69bb      	ldr	r3, [r7, #24]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08003468 	.word	0x08003468
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	007a1200 	.word	0x007a1200

080020dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f8:	f7ff fff0 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020fc:	4601      	mov	r1, r0
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_RCC_GetPCLK1Freq+0x28>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08003460 	.word	0x08003460

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002124:	f7ff ffda 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002128:	4601      	mov	r1, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	08003460 	.word	0x08003460

0800214c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002164:	f7ff fa04 	bl	8001570 <HAL_PWREx_GetVoltageRange>
 8002168:	6178      	str	r0, [r7, #20]
 800216a:	e014      	b.n	8002196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	6593      	str	r3, [r2, #88]	; 0x58
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002184:	f7ff f9f4 	bl	8001570 <HAL_PWREx_GetVoltageRange>
 8002188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	d10b      	bne.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d919      	bls.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2ba0      	cmp	r3, #160	; 0xa0
 80021a8:	d902      	bls.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021aa:	2302      	movs	r3, #2
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	e013      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e010      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d902      	bls.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021bc:	2303      	movs	r3, #3
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e00a      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d102      	bne.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c8:	2302      	movs	r3, #2
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e004      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b70      	cmp	r3, #112	; 0x70
 80021d2:	d101      	bne.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 0207 	bic.w	r2, r3, #7
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002214:	2300      	movs	r3, #0
 8002216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002218:	2300      	movs	r3, #0
 800221a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d01c      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002236:	d802      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800223c:	e01f      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800223e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002242:	d003      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002248:	d01c      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4b85      	ldr	r3, [pc, #532]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a84      	ldr	r2, [pc, #528]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002258:	e015      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fab9 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fba0 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b75      	ldr	r3, [pc, #468]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800229a:	4972      	ldr	r1, [pc, #456]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03f      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d01c      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c2:	d802      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80022c8:	e01f      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ce:	d003      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80022d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022d4:	d01c      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80022d6:	e018      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d8:	4b62      	ldr	r3, [pc, #392]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a61      	ldr	r2, [pc, #388]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e4:	e015      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fa73 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f6:	e00c      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3320      	adds	r3, #32
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb5a 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002308:	e003      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	74fb      	strb	r3, [r7, #19]
      break;
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002318:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002326:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232e:	e001      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	; 0x58
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002384:	f7fe fe08 	bl	8000f98 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238a:	e009      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fe04 	bl	8000f98 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	74fb      	strb	r3, [r7, #19]
        break;
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ef      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d15c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01f      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d019      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fdc3 	bl	8000f98 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002414:	e00b      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fdbf 	bl	8000f98 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d902      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	74fb      	strb	r3, [r7, #19]
            break;
 800242c:	e006      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ec      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002452:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800245a:	e009      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
 8002460:	e006      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002470:	7c7b      	ldrb	r3, [r7, #17]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b9e      	ldr	r3, [pc, #632]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a9d      	ldr	r2, [pc, #628]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	4b98      	ldr	r3, [pc, #608]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f023 0203 	bic.w	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	4994      	ldr	r1, [pc, #592]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f023 020c 	bic.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	498c      	ldr	r1, [pc, #560]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d2:	4b87      	ldr	r3, [pc, #540]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4983      	ldr	r1, [pc, #524]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f4:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	497b      	ldr	r1, [pc, #492]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	4972      	ldr	r1, [pc, #456]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002538:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	496a      	ldr	r1, [pc, #424]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	4961      	ldr	r1, [pc, #388]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800257c:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4959      	ldr	r1, [pc, #356]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ac:	4950      	ldr	r1, [pc, #320]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	4948      	ldr	r1, [pc, #288]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	493f      	ldr	r1, [pc, #252]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d028      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002622:	d106      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
 8002630:	e011      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263a:	d10c      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8c8 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	491f      	ldr	r1, [pc, #124]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002680:	d106      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	e011      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f899 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026de:	d109      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a02      	ldr	r2, [pc, #8]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
 80026ec:	e014      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2101      	movs	r1, #1
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f867 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02f      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002732:	4928      	ldr	r1, [pc, #160]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002742:	d10d      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f844 	bl	80027d8 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
 800275e:	e011      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3320      	adds	r3, #32
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f921 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	490d      	ldr	r1, [pc, #52]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4904      	ldr	r1, [pc, #16]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e6:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
       ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800280a:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
       ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d044      	beq.n	80028a8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e041      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d00c      	beq.n	8002846 <RCCEx_PLLSAI1_Config+0x6e>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d013      	beq.n	8002858 <RCCEx_PLLSAI1_Config+0x80>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d120      	bne.n	8002876 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002834:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11d      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002844:	e01a      	b.n	800287c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002846:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e013      	b.n	8002880 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002858:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002874:	e006      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      break;
 800287a:	e004      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800287c:	bf00      	nop
 800287e:	e002      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002884:	bf00      	nop
    }

    if(status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800288c:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	3b01      	subs	r3, #1
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	430b      	orrs	r3, r1
 80028a2:	4944      	ldr	r1, [pc, #272]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d17d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe fb6d 	bl	8000f98 <HAL_GetTick>
 80028be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c0:	e009      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c2:	f7fe fb69 	bl	8000f98 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d902      	bls.n	80028d6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	73fb      	strb	r3, [r7, #15]
        break;
 80028d4:	e005      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ef      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d160      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d111      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6892      	ldr	r2, [r2, #8]
 80028fe:	0211      	lsls	r1, r2, #8
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	0912      	lsrs	r2, r2, #4
 8002906:	0452      	lsls	r2, r2, #17
 8002908:	430a      	orrs	r2, r1
 800290a:	492a      	ldr	r1, [pc, #168]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	610b      	str	r3, [r1, #16]
 8002910:	e027      	b.n	8002962 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d112      	bne.n	800293e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	0211      	lsls	r1, r2, #8
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6912      	ldr	r2, [r2, #16]
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	430a      	orrs	r2, r1
 8002936:	491f      	ldr	r1, [pc, #124]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
 800293c:	e011      	b.n	8002962 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002946:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	0211      	lsls	r1, r2, #8
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6952      	ldr	r2, [r2, #20]
 8002954:	0852      	lsrs	r2, r2, #1
 8002956:	3a01      	subs	r2, #1
 8002958:	0652      	lsls	r2, r2, #25
 800295a:	430a      	orrs	r2, r1
 800295c:	4915      	ldr	r1, [pc, #84]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800296c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe fb13 	bl	8000f98 <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002974:	e009      	b.n	800298a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002976:	f7fe fb0f 	bl	8000f98 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	73fb      	strb	r3, [r7, #15]
          break;
 8002988:	e005      	b.n	8002996 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ef      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c6:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
       ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
       ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d044      	beq.n	8002a88 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e041      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d00c      	beq.n	8002a26 <RCCEx_PLLSAI2_Config+0x6e>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d013      	beq.n	8002a38 <RCCEx_PLLSAI2_Config+0x80>
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d120      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a14:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11d      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e01a      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e013      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a38:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a44:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a54:	e006      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e004      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e002      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a64:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4939      	ldr	r1, [pc, #228]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d167      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a8e:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fa7d 	bl	8000f98 <HAL_GetTick>
 8002a9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa0:	e009      	b.n	8002ab6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa2:	f7fe fa79 	bl	8000f98 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d902      	bls.n	8002ab6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab4:	e005      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ef      	bne.n	8002aa2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d14a      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d111      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6892      	ldr	r2, [r2, #8]
 8002ade:	0211      	lsls	r1, r2, #8
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68d2      	ldr	r2, [r2, #12]
 8002ae4:	0912      	lsrs	r2, r2, #4
 8002ae6:	0452      	lsls	r2, r2, #17
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	491f      	ldr	r1, [pc, #124]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	614b      	str	r3, [r1, #20]
 8002af0:	e011      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002afa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	0211      	lsls	r1, r2, #8
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6912      	ldr	r2, [r2, #16]
 8002b08:	0852      	lsrs	r2, r2, #1
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0652      	lsls	r2, r2, #25
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	4915      	ldr	r1, [pc, #84]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fa39 	bl	8000f98 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b2a:	f7fe fa35 	bl	8000f98 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d902      	bls.n	8002b3e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b3c:	e005      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ef      	beq.n	8002b2a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e040      	b.n	8002c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe f926 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f82c 	bl	8002c08 <UART_SetConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faaa 	bl	800311c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb31 	bl	8003260 <UART_CheckIdleState>
 8002bfe:	4603      	mov	r3, r0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4bac      	ldr	r3, [pc, #688]	; (8002ee8 <UART_SetConfig+0x2e0>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	69f9      	ldr	r1, [r7, #28]
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4aa2      	ldr	r2, [pc, #648]	; (8002eec <UART_SetConfig+0x2e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a99      	ldr	r2, [pc, #612]	; (8002ef0 <UART_SetConfig+0x2e8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d121      	bne.n	8002cd4 <UART_SetConfig+0xcc>
 8002c90:	4b98      	ldr	r3, [pc, #608]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d816      	bhi.n	8002ccc <UART_SetConfig+0xc4>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <UART_SetConfig+0x9c>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc1 	.word	0x08002cc1
 8002cac:	08002cbb 	.word	0x08002cbb
 8002cb0:	08002cc7 	.word	0x08002cc7
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	76fb      	strb	r3, [r7, #27]
 8002cb8:	e0e8      	b.n	8002e8c <UART_SetConfig+0x284>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	76fb      	strb	r3, [r7, #27]
 8002cbe:	e0e5      	b.n	8002e8c <UART_SetConfig+0x284>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	76fb      	strb	r3, [r7, #27]
 8002cc4:	e0e2      	b.n	8002e8c <UART_SetConfig+0x284>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	76fb      	strb	r3, [r7, #27]
 8002cca:	e0df      	b.n	8002e8c <UART_SetConfig+0x284>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	76fb      	strb	r3, [r7, #27]
 8002cd0:	bf00      	nop
 8002cd2:	e0db      	b.n	8002e8c <UART_SetConfig+0x284>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <UART_SetConfig+0x2f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d134      	bne.n	8002d48 <UART_SetConfig+0x140>
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d829      	bhi.n	8002d40 <UART_SetConfig+0x138>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0xec>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d41 	.word	0x08002d41
 8002cfc:	08002d41 	.word	0x08002d41
 8002d00:	08002d41 	.word	0x08002d41
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d41 	.word	0x08002d41
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d41 	.word	0x08002d41
 8002d14:	08002d2f 	.word	0x08002d2f
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d41 	.word	0x08002d41
 8002d24:	08002d3b 	.word	0x08002d3b
 8002d28:	2300      	movs	r3, #0
 8002d2a:	76fb      	strb	r3, [r7, #27]
 8002d2c:	e0ae      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	76fb      	strb	r3, [r7, #27]
 8002d32:	e0ab      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d34:	2304      	movs	r3, #4
 8002d36:	76fb      	strb	r3, [r7, #27]
 8002d38:	e0a8      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	76fb      	strb	r3, [r7, #27]
 8002d3e:	e0a5      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d40:	2310      	movs	r3, #16
 8002d42:	76fb      	strb	r3, [r7, #27]
 8002d44:	bf00      	nop
 8002d46:	e0a1      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <UART_SetConfig+0x2f4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d120      	bne.n	8002d94 <UART_SetConfig+0x18c>
 8002d52:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d00f      	beq.n	8002d80 <UART_SetConfig+0x178>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d802      	bhi.n	8002d6a <UART_SetConfig+0x162>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <UART_SetConfig+0x16c>
 8002d68:	e010      	b.n	8002d8c <UART_SetConfig+0x184>
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d005      	beq.n	8002d7a <UART_SetConfig+0x172>
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d009      	beq.n	8002d86 <UART_SetConfig+0x17e>
 8002d72:	e00b      	b.n	8002d8c <UART_SetConfig+0x184>
 8002d74:	2300      	movs	r3, #0
 8002d76:	76fb      	strb	r3, [r7, #27]
 8002d78:	e088      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	76fb      	strb	r3, [r7, #27]
 8002d7e:	e085      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d80:	2304      	movs	r3, #4
 8002d82:	76fb      	strb	r3, [r7, #27]
 8002d84:	e082      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d86:	2308      	movs	r3, #8
 8002d88:	76fb      	strb	r3, [r7, #27]
 8002d8a:	e07f      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	76fb      	strb	r3, [r7, #27]
 8002d90:	bf00      	nop
 8002d92:	e07b      	b.n	8002e8c <UART_SetConfig+0x284>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <UART_SetConfig+0x2f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d120      	bne.n	8002de0 <UART_SetConfig+0x1d8>
 8002d9e:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d00f      	beq.n	8002dcc <UART_SetConfig+0x1c4>
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d802      	bhi.n	8002db6 <UART_SetConfig+0x1ae>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <UART_SetConfig+0x1b8>
 8002db4:	e010      	b.n	8002dd8 <UART_SetConfig+0x1d0>
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d005      	beq.n	8002dc6 <UART_SetConfig+0x1be>
 8002dba:	2bc0      	cmp	r3, #192	; 0xc0
 8002dbc:	d009      	beq.n	8002dd2 <UART_SetConfig+0x1ca>
 8002dbe:	e00b      	b.n	8002dd8 <UART_SetConfig+0x1d0>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	76fb      	strb	r3, [r7, #27]
 8002dc4:	e062      	b.n	8002e8c <UART_SetConfig+0x284>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	76fb      	strb	r3, [r7, #27]
 8002dca:	e05f      	b.n	8002e8c <UART_SetConfig+0x284>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	76fb      	strb	r3, [r7, #27]
 8002dd0:	e05c      	b.n	8002e8c <UART_SetConfig+0x284>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	76fb      	strb	r3, [r7, #27]
 8002dd6:	e059      	b.n	8002e8c <UART_SetConfig+0x284>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	76fb      	strb	r3, [r7, #27]
 8002ddc:	bf00      	nop
 8002dde:	e055      	b.n	8002e8c <UART_SetConfig+0x284>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a47      	ldr	r2, [pc, #284]	; (8002f04 <UART_SetConfig+0x2fc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d124      	bne.n	8002e34 <UART_SetConfig+0x22c>
 8002dea:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d012      	beq.n	8002e20 <UART_SetConfig+0x218>
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d802      	bhi.n	8002e06 <UART_SetConfig+0x1fe>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <UART_SetConfig+0x20c>
 8002e04:	e012      	b.n	8002e2c <UART_SetConfig+0x224>
 8002e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0a:	d006      	beq.n	8002e1a <UART_SetConfig+0x212>
 8002e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e10:	d009      	beq.n	8002e26 <UART_SetConfig+0x21e>
 8002e12:	e00b      	b.n	8002e2c <UART_SetConfig+0x224>
 8002e14:	2300      	movs	r3, #0
 8002e16:	76fb      	strb	r3, [r7, #27]
 8002e18:	e038      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	76fb      	strb	r3, [r7, #27]
 8002e1e:	e035      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e20:	2304      	movs	r3, #4
 8002e22:	76fb      	strb	r3, [r7, #27]
 8002e24:	e032      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e26:	2308      	movs	r3, #8
 8002e28:	76fb      	strb	r3, [r7, #27]
 8002e2a:	e02f      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	76fb      	strb	r3, [r7, #27]
 8002e30:	bf00      	nop
 8002e32:	e02b      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <UART_SetConfig+0x2e4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d124      	bne.n	8002e88 <UART_SetConfig+0x280>
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <UART_SetConfig+0x2ec>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4c:	d012      	beq.n	8002e74 <UART_SetConfig+0x26c>
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d802      	bhi.n	8002e5a <UART_SetConfig+0x252>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <UART_SetConfig+0x260>
 8002e58:	e012      	b.n	8002e80 <UART_SetConfig+0x278>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d006      	beq.n	8002e6e <UART_SetConfig+0x266>
 8002e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e64:	d009      	beq.n	8002e7a <UART_SetConfig+0x272>
 8002e66:	e00b      	b.n	8002e80 <UART_SetConfig+0x278>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	e00e      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	76fb      	strb	r3, [r7, #27]
 8002e72:	e00b      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e74:	2304      	movs	r3, #4
 8002e76:	76fb      	strb	r3, [r7, #27]
 8002e78:	e008      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	76fb      	strb	r3, [r7, #27]
 8002e7e:	e005      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e80:	2310      	movs	r3, #16
 8002e82:	76fb      	strb	r3, [r7, #27]
 8002e84:	bf00      	nop
 8002e86:	e001      	b.n	8002e8c <UART_SetConfig+0x284>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <UART_SetConfig+0x2e4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f040 8087 	bne.w	8002fa6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e98:	7efb      	ldrb	r3, [r7, #27]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d836      	bhi.n	8002f0c <UART_SetConfig+0x304>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0x29c>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002f0d 	.word	0x08002f0d
 8002eb4:	08002ed7 	.word	0x08002ed7
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002edf 	.word	0x08002edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f7ff f914 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	6178      	str	r0, [r7, #20]
        break;
 8002ece:	e022      	b.n	8002f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <UART_SetConfig+0x300>)
 8002ed2:	617b      	str	r3, [r7, #20]
        break;
 8002ed4:	e01f      	b.n	8002f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed6:	f7ff f877 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002eda:	6178      	str	r0, [r7, #20]
        break;
 8002edc:	e01b      	b.n	8002f16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee2:	617b      	str	r3, [r7, #20]
        break;
 8002ee4:	e017      	b.n	8002f16 <UART_SetConfig+0x30e>
 8002ee6:	bf00      	nop
 8002ee8:	efff69f3 	.word	0xefff69f3
 8002eec:	40008000 	.word	0x40008000
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40004c00 	.word	0x40004c00
 8002f04:	40005000 	.word	0x40005000
 8002f08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	76bb      	strb	r3, [r7, #26]
        break;
 8002f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80f1 	beq.w	8003100 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d305      	bcc.n	8002f3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d902      	bls.n	8002f40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	76bb      	strb	r3, [r7, #26]
 8002f3e:	e0df      	b.n	8003100 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	0214      	lsls	r4, r2, #8
 8002f52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f56:	020b      	lsls	r3, r1, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	eb13 0b01 	adds.w	fp, r3, r1
 8002f68:	eb44 0c02 	adc.w	ip, r4, r2
 8002f6c:	4658      	mov	r0, fp
 8002f6e:	4661      	mov	r1, ip
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f04f 0400 	mov.w	r4, #0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	f7fd f924 	bl	80001c8 <__aeabi_uldivmod>
 8002f80:	4603      	mov	r3, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8c:	d308      	bcc.n	8002fa0 <UART_SetConfig+0x398>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f94:	d204      	bcs.n	8002fa0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e0af      	b.n	8003100 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	76bb      	strb	r3, [r7, #26]
 8002fa4:	e0ac      	b.n	8003100 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fae:	d15b      	bne.n	8003068 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002fb0:	7efb      	ldrb	r3, [r7, #27]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d827      	bhi.n	8003006 <UART_SetConfig+0x3fe>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x3b4>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fe9 	.word	0x08002fe9
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	08003007 	.word	0x08003007
 8002fcc:	08002ff7 	.word	0x08002ff7
 8002fd0:	08003007 	.word	0x08003007
 8002fd4:	08003007 	.word	0x08003007
 8002fd8:	08003007 	.word	0x08003007
 8002fdc:	08002fff 	.word	0x08002fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7ff f888 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	6178      	str	r0, [r7, #20]
        break;
 8002fe6:	e013      	b.n	8003010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7ff f89a 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8002fec:	6178      	str	r0, [r7, #20]
        break;
 8002fee:	e00f      	b.n	8003010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff0:	4b49      	ldr	r3, [pc, #292]	; (8003118 <UART_SetConfig+0x510>)
 8002ff2:	617b      	str	r3, [r7, #20]
        break;
 8002ff4:	e00c      	b.n	8003010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff6:	f7fe ffe7 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002ffa:	6178      	str	r0, [r7, #20]
        break;
 8002ffc:	e008      	b.n	8003010 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	617b      	str	r3, [r7, #20]
        break;
 8003004:	e004      	b.n	8003010 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	76bb      	strb	r3, [r7, #26]
        break;
 800300e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d074      	beq.n	8003100 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d916      	bls.n	8003062 <UART_SetConfig+0x45a>
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303a:	d212      	bcs.n	8003062 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f023 030f 	bic.w	r3, r3, #15
 8003044:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	b29a      	uxth	r2, r3
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	4313      	orrs	r3, r2
 8003056:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	89fa      	ldrh	r2, [r7, #14]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e04e      	b.n	8003100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	76bb      	strb	r3, [r7, #26]
 8003066:	e04b      	b.n	8003100 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003068:	7efb      	ldrb	r3, [r7, #27]
 800306a:	2b08      	cmp	r3, #8
 800306c:	d827      	bhi.n	80030be <UART_SetConfig+0x4b6>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <UART_SetConfig+0x46c>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003099 	.word	0x08003099
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a9 	.word	0x080030a9
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030af 	.word	0x080030af
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff f82c 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 800309c:	6178      	str	r0, [r7, #20]
        break;
 800309e:	e013      	b.n	80030c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7ff f83e 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 80030a4:	6178      	str	r0, [r7, #20]
        break;
 80030a6:	e00f      	b.n	80030c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <UART_SetConfig+0x510>)
 80030aa:	617b      	str	r3, [r7, #20]
        break;
 80030ac:	e00c      	b.n	80030c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7fe ff8b 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80030b2:	6178      	str	r0, [r7, #20]
        break;
 80030b4:	e008      	b.n	80030c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	617b      	str	r3, [r7, #20]
        break;
 80030bc:	e004      	b.n	80030c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	76bb      	strb	r3, [r7, #26]
        break;
 80030c6:	bf00      	nop
    }

    if (pclk != 0U)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d018      	beq.n	8003100 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	085a      	lsrs	r2, r3, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d908      	bls.n	80030fc <UART_SetConfig+0x4f4>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d204      	bcs.n	80030fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e001      	b.n	8003100 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800310c:	7ebb      	ldrb	r3, [r7, #26]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003118:	00f42400 	.word	0x00f42400

0800311c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01a      	beq.n	8003232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321a:	d10a      	bne.n	8003232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800326e:	f7fd fe93 	bl	8000f98 <HAL_GetTick>
 8003272:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d10e      	bne.n	80032a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003282:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f82a 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e020      	b.n	80032e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d10e      	bne.n	80032cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f814 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e00a      	b.n	80032e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e05d      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d059      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fd fe48 	bl	8000f98 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11b      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003328:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e042      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02b      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d123      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003378:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003388:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e00f      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d092      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0d      	ldr	r6, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1ba4      	subs	r4, r4, r6
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2500      	movs	r5, #0
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4e0b      	ldr	r6, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f820 	bl	8003438 <_init>
 80033f8:	1ba4      	subs	r4, r4, r6
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2500      	movs	r5, #0
 80033fe:	42a5      	cmp	r5, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003408:	4798      	blx	r3
 800340a:	3501      	adds	r5, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003412:	4798      	blx	r3
 8003414:	3501      	adds	r5, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	080034a0 	.word	0x080034a0
 800341c:	080034a0 	.word	0x080034a0
 8003420:	080034a0 	.word	0x080034a0
 8003424:	080034a4 	.word	0x080034a4

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
